// Code generated by protoc-gen-go. DO NOT EDIT.
// source: system/system.proto

package gnoi_system

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/openconfig/gnoi/common"
	types "github.com/openconfig/gnoi/types"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A RebootMethod determines what should be done with a target when a Reboot is
// requested.  Only the COLD method is required to be supported by all
// targets.  Methods the target does not support should result in failure.
//
// It is vendor defined if a WARM reboot is the same as an NSF reboot.
type RebootMethod int32

const (
	RebootMethod_UNKNOWN   RebootMethod = 0
	RebootMethod_COLD      RebootMethod = 1
	RebootMethod_POWERDOWN RebootMethod = 2
	RebootMethod_HALT      RebootMethod = 3
	RebootMethod_WARM      RebootMethod = 4
	RebootMethod_NSF       RebootMethod = 5
	RebootMethod_RESET     RebootMethod = 6
	RebootMethod_POWERUP   RebootMethod = 7
)

var RebootMethod_name = map[int32]string{
	0: "UNKNOWN",
	1: "COLD",
	2: "POWERDOWN",
	3: "HALT",
	4: "WARM",
	5: "NSF",
	6: "RESET",
	7: "POWERUP",
}

var RebootMethod_value = map[string]int32{
	"UNKNOWN":   0,
	"COLD":      1,
	"POWERDOWN": 2,
	"HALT":      3,
	"WARM":      4,
	"NSF":       5,
	"RESET":     6,
	"POWERUP":   7,
}

func (x RebootMethod) String() string {
	return proto.EnumName(RebootMethod_name, int32(x))
}

func (RebootMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{0}
}

type TracerouteRequest_L4Protocol int32

const (
	TracerouteRequest_ICMP TracerouteRequest_L4Protocol = 0
	TracerouteRequest_TCP  TracerouteRequest_L4Protocol = 1
	TracerouteRequest_UDP  TracerouteRequest_L4Protocol = 2
)

var TracerouteRequest_L4Protocol_name = map[int32]string{
	0: "ICMP",
	1: "TCP",
	2: "UDP",
}

var TracerouteRequest_L4Protocol_value = map[string]int32{
	"ICMP": 0,
	"TCP":  1,
	"UDP":  2,
}

func (x TracerouteRequest_L4Protocol) String() string {
	return proto.EnumName(TracerouteRequest_L4Protocol_name, int32(x))
}

func (TracerouteRequest_L4Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{12, 0}
}

// State is the resulting state of a single traceoroute packet.
type TracerouteResponse_State int32

const (
	TracerouteResponse_DEFAULT              TracerouteResponse_State = 0
	TracerouteResponse_NONE                 TracerouteResponse_State = 1
	TracerouteResponse_UNKNOWN              TracerouteResponse_State = 2
	TracerouteResponse_ICMP                 TracerouteResponse_State = 3
	TracerouteResponse_HOST_UNREACHABLE     TracerouteResponse_State = 4
	TracerouteResponse_NETWORK_UNREACHABLE  TracerouteResponse_State = 5
	TracerouteResponse_PROTOCOL_UNREACHABLE TracerouteResponse_State = 6
	TracerouteResponse_SOURCE_ROUTE_FAILED  TracerouteResponse_State = 7
	TracerouteResponse_FRAGMENTATION_NEEDED TracerouteResponse_State = 8
	TracerouteResponse_PROHIBITED           TracerouteResponse_State = 9
	TracerouteResponse_PRECEDENCE_VIOLATION TracerouteResponse_State = 10
	TracerouteResponse_PRECEDENCE_CUTOFF    TracerouteResponse_State = 11
)

var TracerouteResponse_State_name = map[int32]string{
	0:  "DEFAULT",
	1:  "NONE",
	2:  "UNKNOWN",
	3:  "ICMP",
	4:  "HOST_UNREACHABLE",
	5:  "NETWORK_UNREACHABLE",
	6:  "PROTOCOL_UNREACHABLE",
	7:  "SOURCE_ROUTE_FAILED",
	8:  "FRAGMENTATION_NEEDED",
	9:  "PROHIBITED",
	10: "PRECEDENCE_VIOLATION",
	11: "PRECEDENCE_CUTOFF",
}

var TracerouteResponse_State_value = map[string]int32{
	"DEFAULT":              0,
	"NONE":                 1,
	"UNKNOWN":              2,
	"ICMP":                 3,
	"HOST_UNREACHABLE":     4,
	"NETWORK_UNREACHABLE":  5,
	"PROTOCOL_UNREACHABLE": 6,
	"SOURCE_ROUTE_FAILED":  7,
	"FRAGMENTATION_NEEDED": 8,
	"PROHIBITED":           9,
	"PRECEDENCE_VIOLATION": 10,
	"PRECEDENCE_CUTOFF":    11,
}

func (x TracerouteResponse_State) String() string {
	return proto.EnumName(TracerouteResponse_State_name, int32(x))
}

func (TracerouteResponse_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{13, 0}
}

type SwitchControlProcessorRequest struct {
	ControlProcessor     *types.Path `protobuf:"bytes,1,opt,name=control_processor,json=controlProcessor,proto3" json:"control_processor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SwitchControlProcessorRequest) Reset()         { *m = SwitchControlProcessorRequest{} }
func (m *SwitchControlProcessorRequest) String() string { return proto.CompactTextString(m) }
func (*SwitchControlProcessorRequest) ProtoMessage()    {}
func (*SwitchControlProcessorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{0}
}

func (m *SwitchControlProcessorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SwitchControlProcessorRequest.Unmarshal(m, b)
}
func (m *SwitchControlProcessorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SwitchControlProcessorRequest.Marshal(b, m, deterministic)
}
func (m *SwitchControlProcessorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwitchControlProcessorRequest.Merge(m, src)
}
func (m *SwitchControlProcessorRequest) XXX_Size() int {
	return xxx_messageInfo_SwitchControlProcessorRequest.Size(m)
}
func (m *SwitchControlProcessorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SwitchControlProcessorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SwitchControlProcessorRequest proto.InternalMessageInfo

func (m *SwitchControlProcessorRequest) GetControlProcessor() *types.Path {
	if m != nil {
		return m.ControlProcessor
	}
	return nil
}

type SwitchControlProcessorResponse struct {
	ControlProcessor     *types.Path `protobuf:"bytes,1,opt,name=control_processor,json=controlProcessor,proto3" json:"control_processor,omitempty"`
	Version              string      `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Uptime               int64       `protobuf:"varint,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SwitchControlProcessorResponse) Reset()         { *m = SwitchControlProcessorResponse{} }
func (m *SwitchControlProcessorResponse) String() string { return proto.CompactTextString(m) }
func (*SwitchControlProcessorResponse) ProtoMessage()    {}
func (*SwitchControlProcessorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{1}
}

func (m *SwitchControlProcessorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SwitchControlProcessorResponse.Unmarshal(m, b)
}
func (m *SwitchControlProcessorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SwitchControlProcessorResponse.Marshal(b, m, deterministic)
}
func (m *SwitchControlProcessorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwitchControlProcessorResponse.Merge(m, src)
}
func (m *SwitchControlProcessorResponse) XXX_Size() int {
	return xxx_messageInfo_SwitchControlProcessorResponse.Size(m)
}
func (m *SwitchControlProcessorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SwitchControlProcessorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SwitchControlProcessorResponse proto.InternalMessageInfo

func (m *SwitchControlProcessorResponse) GetControlProcessor() *types.Path {
	if m != nil {
		return m.ControlProcessor
	}
	return nil
}

func (m *SwitchControlProcessorResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SwitchControlProcessorResponse) GetUptime() int64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

// A RebootRequest requests the specified target be rebooted using the specified
// method aftar the specified delay.  Only the DEFAULT method with a delay of 0
// is guaranteed to be accepted for all target types.
type RebootRequest struct {
	Method RebootMethod `protobuf:"varint,1,opt,name=method,proto3,enum=gnoi.system.RebootMethod" json:"method,omitempty"`
	// Delay in nanoseconds before issuing reboot.
	Delay uint64 `protobuf:"varint,2,opt,name=delay,proto3" json:"delay,omitempty"`
	// Informational reason for the reboot.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// Optional sub-components to reboot.
	Subcomponents []*types.Path `protobuf:"bytes,4,rep,name=subcomponents,proto3" json:"subcomponents,omitempty"`
	// Force reboot if sanity checks fail. (ex. uncommited configuration)
	Force                bool     `protobuf:"varint,5,opt,name=force,proto3" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RebootRequest) Reset()         { *m = RebootRequest{} }
func (m *RebootRequest) String() string { return proto.CompactTextString(m) }
func (*RebootRequest) ProtoMessage()    {}
func (*RebootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{2}
}

func (m *RebootRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RebootRequest.Unmarshal(m, b)
}
func (m *RebootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RebootRequest.Marshal(b, m, deterministic)
}
func (m *RebootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RebootRequest.Merge(m, src)
}
func (m *RebootRequest) XXX_Size() int {
	return xxx_messageInfo_RebootRequest.Size(m)
}
func (m *RebootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RebootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RebootRequest proto.InternalMessageInfo

func (m *RebootRequest) GetMethod() RebootMethod {
	if m != nil {
		return m.Method
	}
	return RebootMethod_UNKNOWN
}

func (m *RebootRequest) GetDelay() uint64 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *RebootRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RebootRequest) GetSubcomponents() []*types.Path {
	if m != nil {
		return m.Subcomponents
	}
	return nil
}

func (m *RebootRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type RebootResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RebootResponse) Reset()         { *m = RebootResponse{} }
func (m *RebootResponse) String() string { return proto.CompactTextString(m) }
func (*RebootResponse) ProtoMessage()    {}
func (*RebootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{3}
}

func (m *RebootResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RebootResponse.Unmarshal(m, b)
}
func (m *RebootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RebootResponse.Marshal(b, m, deterministic)
}
func (m *RebootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RebootResponse.Merge(m, src)
}
func (m *RebootResponse) XXX_Size() int {
	return xxx_messageInfo_RebootResponse.Size(m)
}
func (m *RebootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RebootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RebootResponse proto.InternalMessageInfo

// A CancelRebootRequest requests the cancelation of any outstanding reboot
// request.
type CancelRebootRequest struct {
	Message              string        `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Subcomponents        []*types.Path `protobuf:"bytes,2,rep,name=subcomponents,proto3" json:"subcomponents,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CancelRebootRequest) Reset()         { *m = CancelRebootRequest{} }
func (m *CancelRebootRequest) String() string { return proto.CompactTextString(m) }
func (*CancelRebootRequest) ProtoMessage()    {}
func (*CancelRebootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{4}
}

func (m *CancelRebootRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelRebootRequest.Unmarshal(m, b)
}
func (m *CancelRebootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelRebootRequest.Marshal(b, m, deterministic)
}
func (m *CancelRebootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelRebootRequest.Merge(m, src)
}
func (m *CancelRebootRequest) XXX_Size() int {
	return xxx_messageInfo_CancelRebootRequest.Size(m)
}
func (m *CancelRebootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelRebootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelRebootRequest proto.InternalMessageInfo

func (m *CancelRebootRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CancelRebootRequest) GetSubcomponents() []*types.Path {
	if m != nil {
		return m.Subcomponents
	}
	return nil
}

type CancelRebootResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelRebootResponse) Reset()         { *m = CancelRebootResponse{} }
func (m *CancelRebootResponse) String() string { return proto.CompactTextString(m) }
func (*CancelRebootResponse) ProtoMessage()    {}
func (*CancelRebootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{5}
}

func (m *CancelRebootResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelRebootResponse.Unmarshal(m, b)
}
func (m *CancelRebootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelRebootResponse.Marshal(b, m, deterministic)
}
func (m *CancelRebootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelRebootResponse.Merge(m, src)
}
func (m *CancelRebootResponse) XXX_Size() int {
	return xxx_messageInfo_CancelRebootResponse.Size(m)
}
func (m *CancelRebootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelRebootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CancelRebootResponse proto.InternalMessageInfo

type RebootStatusRequest struct {
	Subcomponents        []*types.Path `protobuf:"bytes,1,rep,name=subcomponents,proto3" json:"subcomponents,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RebootStatusRequest) Reset()         { *m = RebootStatusRequest{} }
func (m *RebootStatusRequest) String() string { return proto.CompactTextString(m) }
func (*RebootStatusRequest) ProtoMessage()    {}
func (*RebootStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{6}
}

func (m *RebootStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RebootStatusRequest.Unmarshal(m, b)
}
func (m *RebootStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RebootStatusRequest.Marshal(b, m, deterministic)
}
func (m *RebootStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RebootStatusRequest.Merge(m, src)
}
func (m *RebootStatusRequest) XXX_Size() int {
	return xxx_messageInfo_RebootStatusRequest.Size(m)
}
func (m *RebootStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RebootStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RebootStatusRequest proto.InternalMessageInfo

func (m *RebootStatusRequest) GetSubcomponents() []*types.Path {
	if m != nil {
		return m.Subcomponents
	}
	return nil
}

type RebootStatusResponse struct {
	Active               bool     `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	Wait                 uint64   `protobuf:"varint,2,opt,name=wait,proto3" json:"wait,omitempty"`
	When                 uint64   `protobuf:"varint,3,opt,name=when,proto3" json:"when,omitempty"`
	Reason               string   `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Count                uint32   `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RebootStatusResponse) Reset()         { *m = RebootStatusResponse{} }
func (m *RebootStatusResponse) String() string { return proto.CompactTextString(m) }
func (*RebootStatusResponse) ProtoMessage()    {}
func (*RebootStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{7}
}

func (m *RebootStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RebootStatusResponse.Unmarshal(m, b)
}
func (m *RebootStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RebootStatusResponse.Marshal(b, m, deterministic)
}
func (m *RebootStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RebootStatusResponse.Merge(m, src)
}
func (m *RebootStatusResponse) XXX_Size() int {
	return xxx_messageInfo_RebootStatusResponse.Size(m)
}
func (m *RebootStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RebootStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RebootStatusResponse proto.InternalMessageInfo

func (m *RebootStatusResponse) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *RebootStatusResponse) GetWait() uint64 {
	if m != nil {
		return m.Wait
	}
	return 0
}

func (m *RebootStatusResponse) GetWhen() uint64 {
	if m != nil {
		return m.When
	}
	return 0
}

func (m *RebootStatusResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *RebootStatusResponse) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// A TimeRequest requests the current time accodring to the target.
type TimeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeRequest) Reset()         { *m = TimeRequest{} }
func (m *TimeRequest) String() string { return proto.CompactTextString(m) }
func (*TimeRequest) ProtoMessage()    {}
func (*TimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{8}
}

func (m *TimeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeRequest.Unmarshal(m, b)
}
func (m *TimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeRequest.Marshal(b, m, deterministic)
}
func (m *TimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeRequest.Merge(m, src)
}
func (m *TimeRequest) XXX_Size() int {
	return xxx_messageInfo_TimeRequest.Size(m)
}
func (m *TimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TimeRequest proto.InternalMessageInfo

type TimeResponse struct {
	Time                 uint64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeResponse) Reset()         { *m = TimeResponse{} }
func (m *TimeResponse) String() string { return proto.CompactTextString(m) }
func (*TimeResponse) ProtoMessage()    {}
func (*TimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{9}
}

func (m *TimeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeResponse.Unmarshal(m, b)
}
func (m *TimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeResponse.Marshal(b, m, deterministic)
}
func (m *TimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeResponse.Merge(m, src)
}
func (m *TimeResponse) XXX_Size() int {
	return xxx_messageInfo_TimeResponse.Size(m)
}
func (m *TimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TimeResponse proto.InternalMessageInfo

func (m *TimeResponse) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

// A PingRequest describes the ping operation to perform.  Only the destination
// fields is required.  Any field not specified is set to a reasonable server
// specified value.  Not all fields are supported by all vendors.
//
// A count of 0 defaults to a vendor specified value, typically 5.  A count of
// -1 means continue until the RPC times out or is canceled.
//
// If the interval is -1 then a flood ping is issued.
//
// If the size is 0, the vendor default size will be used (typically 56 bytes).
type PingRequest struct {
	Destination          string           `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Source               string           `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Count                int32            `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Interval             int64            `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	Wait                 int64            `protobuf:"varint,5,opt,name=wait,proto3" json:"wait,omitempty"`
	Size                 int32            `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	DoNotFragment        bool             `protobuf:"varint,7,opt,name=do_not_fragment,json=doNotFragment,proto3" json:"do_not_fragment,omitempty"`
	DoNotResolve         bool             `protobuf:"varint,8,opt,name=do_not_resolve,json=doNotResolve,proto3" json:"do_not_resolve,omitempty"`
	L3Protocol           types.L3Protocol `protobuf:"varint,9,opt,name=l3protocol,proto3,enum=gnoi.L3Protocol" json:"l3protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{10}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *PingRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *PingRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PingRequest) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *PingRequest) GetWait() int64 {
	if m != nil {
		return m.Wait
	}
	return 0
}

func (m *PingRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *PingRequest) GetDoNotFragment() bool {
	if m != nil {
		return m.DoNotFragment
	}
	return false
}

func (m *PingRequest) GetDoNotResolve() bool {
	if m != nil {
		return m.DoNotResolve
	}
	return false
}

func (m *PingRequest) GetL3Protocol() types.L3Protocol {
	if m != nil {
		return m.L3Protocol
	}
	return types.L3Protocol_UNSPECIFIED
}

// A PingResponse represents either the reponse to a single ping packet
// (the bytes field is non-zero) or the summary statistics (sent is non-zero).
//
// For a single ping packet, time is the round trip time, in nanoseconds.  For
// summary statistics, it is the time spent by the ping operation.  The time is
// not always present in summary statistics.  The std_dev is not always present
// in summary statistics.
type PingResponse struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Time                 int64    `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Sent                 int32    `protobuf:"varint,3,opt,name=sent,proto3" json:"sent,omitempty"`
	Received             int32    `protobuf:"varint,4,opt,name=received,proto3" json:"received,omitempty"`
	MinTime              int64    `protobuf:"varint,5,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
	AvgTime              int64    `protobuf:"varint,6,opt,name=avg_time,json=avgTime,proto3" json:"avg_time,omitempty"`
	MaxTime              int64    `protobuf:"varint,7,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	StdDev               int64    `protobuf:"varint,8,opt,name=std_dev,json=stdDev,proto3" json:"std_dev,omitempty"`
	Bytes                int32    `protobuf:"varint,11,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Sequence             int32    `protobuf:"varint,12,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Ttl                  int32    `protobuf:"varint,13,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResponse) Reset()         { *m = PingResponse{} }
func (m *PingResponse) String() string { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()    {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{11}
}

func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResponse.Unmarshal(m, b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
}
func (m *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(m, src)
}
func (m *PingResponse) XXX_Size() int {
	return xxx_messageInfo_PingResponse.Size(m)
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func (m *PingResponse) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *PingResponse) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PingResponse) GetSent() int32 {
	if m != nil {
		return m.Sent
	}
	return 0
}

func (m *PingResponse) GetReceived() int32 {
	if m != nil {
		return m.Received
	}
	return 0
}

func (m *PingResponse) GetMinTime() int64 {
	if m != nil {
		return m.MinTime
	}
	return 0
}

func (m *PingResponse) GetAvgTime() int64 {
	if m != nil {
		return m.AvgTime
	}
	return 0
}

func (m *PingResponse) GetMaxTime() int64 {
	if m != nil {
		return m.MaxTime
	}
	return 0
}

func (m *PingResponse) GetStdDev() int64 {
	if m != nil {
		return m.StdDev
	}
	return 0
}

func (m *PingResponse) GetBytes() int32 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

func (m *PingResponse) GetSequence() int32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *PingResponse) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

// A TracerouteRequest describes the traceroute operation to perform.  Only the
// destination field is required.  Any field not specified is set to a
// reasonable server specified value.  Not all fields are supported by all
// vendors.
//
// If the hop_count is -1 the traceroute will continue forever.
//
type TracerouteRequest struct {
	Source               string                       `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination          string                       `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	InitialTtl           uint32                       `protobuf:"varint,3,opt,name=initial_ttl,json=initialTtl,proto3" json:"initial_ttl,omitempty"`
	MaxTtl               int32                        `protobuf:"varint,4,opt,name=max_ttl,json=maxTtl,proto3" json:"max_ttl,omitempty"`
	Wait                 int64                        `protobuf:"varint,5,opt,name=wait,proto3" json:"wait,omitempty"`
	DoNotFragment        bool                         `protobuf:"varint,6,opt,name=do_not_fragment,json=doNotFragment,proto3" json:"do_not_fragment,omitempty"`
	DoNotResolve         bool                         `protobuf:"varint,7,opt,name=do_not_resolve,json=doNotResolve,proto3" json:"do_not_resolve,omitempty"`
	L3Protocol           types.L3Protocol             `protobuf:"varint,8,opt,name=l3protocol,proto3,enum=gnoi.L3Protocol" json:"l3protocol,omitempty"`
	L4Protocol           TracerouteRequest_L4Protocol `protobuf:"varint,9,opt,name=l4protocol,proto3,enum=gnoi.system.TracerouteRequest_L4Protocol" json:"l4protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *TracerouteRequest) Reset()         { *m = TracerouteRequest{} }
func (m *TracerouteRequest) String() string { return proto.CompactTextString(m) }
func (*TracerouteRequest) ProtoMessage()    {}
func (*TracerouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{12}
}

func (m *TracerouteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteRequest.Unmarshal(m, b)
}
func (m *TracerouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteRequest.Marshal(b, m, deterministic)
}
func (m *TracerouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteRequest.Merge(m, src)
}
func (m *TracerouteRequest) XXX_Size() int {
	return xxx_messageInfo_TracerouteRequest.Size(m)
}
func (m *TracerouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteRequest proto.InternalMessageInfo

func (m *TracerouteRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *TracerouteRequest) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *TracerouteRequest) GetInitialTtl() uint32 {
	if m != nil {
		return m.InitialTtl
	}
	return 0
}

func (m *TracerouteRequest) GetMaxTtl() int32 {
	if m != nil {
		return m.MaxTtl
	}
	return 0
}

func (m *TracerouteRequest) GetWait() int64 {
	if m != nil {
		return m.Wait
	}
	return 0
}

func (m *TracerouteRequest) GetDoNotFragment() bool {
	if m != nil {
		return m.DoNotFragment
	}
	return false
}

func (m *TracerouteRequest) GetDoNotResolve() bool {
	if m != nil {
		return m.DoNotResolve
	}
	return false
}

func (m *TracerouteRequest) GetL3Protocol() types.L3Protocol {
	if m != nil {
		return m.L3Protocol
	}
	return types.L3Protocol_UNSPECIFIED
}

func (m *TracerouteRequest) GetL4Protocol() TracerouteRequest_L4Protocol {
	if m != nil {
		return m.L4Protocol
	}
	return TracerouteRequest_ICMP
}

// A TraceRouteResponse contains the result of a single traceoute packet.
//
// There may be an optional initial response that provides information about the
// traceroute request itself and contains at least one of the fields in the the
// initial block of fields and none of the fields following that block.  All
// subsequent responses should not contain any of these fields.
//
// Typically multiple responses are received for each hop, as the packets are
// received.
//
// The mpls field maps names to values.  Example names include "Label", "CoS",
// "TTL", "S", and "MRU".
// [Perhaps we should list the canonical names that must be used when
// applicable].
type TracerouteResponse struct {
	// The following fields are only filled in for the first message.
	// If any of these fields are specified, all fields following this
	// block are left unspecified.
	DestinationName    string `protobuf:"bytes,1,opt,name=destination_name,json=destinationName,proto3" json:"destination_name,omitempty"`
	DestinationAddress string `protobuf:"bytes,2,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	Hops               int32  `protobuf:"varint,3,opt,name=hops,proto3" json:"hops,omitempty"`
	PacketSize         int32  `protobuf:"varint,4,opt,name=packet_size,json=packetSize,proto3" json:"packet_size,omitempty"`
	// The following fields provide the disposition of a single traceroute
	// packet.
	Hop                  int32                    `protobuf:"varint,5,opt,name=hop,proto3" json:"hop,omitempty"`
	Address              string                   `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	Name                 string                   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Rtt                  int64                    `protobuf:"varint,8,opt,name=rtt,proto3" json:"rtt,omitempty"`
	State                TracerouteResponse_State `protobuf:"varint,9,opt,name=state,proto3,enum=gnoi.system.TracerouteResponse_State" json:"state,omitempty"`
	IcmpCode             int32                    `protobuf:"varint,10,opt,name=icmp_code,json=icmpCode,proto3" json:"icmp_code,omitempty"`
	Mpls                 map[string]string        `protobuf:"bytes,11,rep,name=mpls,proto3" json:"mpls,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsPath               []int32                  `protobuf:"varint,12,rep,packed,name=as_path,json=asPath,proto3" json:"as_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TracerouteResponse) Reset()         { *m = TracerouteResponse{} }
func (m *TracerouteResponse) String() string { return proto.CompactTextString(m) }
func (*TracerouteResponse) ProtoMessage()    {}
func (*TracerouteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{13}
}

func (m *TracerouteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteResponse.Unmarshal(m, b)
}
func (m *TracerouteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteResponse.Marshal(b, m, deterministic)
}
func (m *TracerouteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteResponse.Merge(m, src)
}
func (m *TracerouteResponse) XXX_Size() int {
	return xxx_messageInfo_TracerouteResponse.Size(m)
}
func (m *TracerouteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteResponse proto.InternalMessageInfo

func (m *TracerouteResponse) GetDestinationName() string {
	if m != nil {
		return m.DestinationName
	}
	return ""
}

func (m *TracerouteResponse) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *TracerouteResponse) GetHops() int32 {
	if m != nil {
		return m.Hops
	}
	return 0
}

func (m *TracerouteResponse) GetPacketSize() int32 {
	if m != nil {
		return m.PacketSize
	}
	return 0
}

func (m *TracerouteResponse) GetHop() int32 {
	if m != nil {
		return m.Hop
	}
	return 0
}

func (m *TracerouteResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TracerouteResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TracerouteResponse) GetRtt() int64 {
	if m != nil {
		return m.Rtt
	}
	return 0
}

func (m *TracerouteResponse) GetState() TracerouteResponse_State {
	if m != nil {
		return m.State
	}
	return TracerouteResponse_DEFAULT
}

func (m *TracerouteResponse) GetIcmpCode() int32 {
	if m != nil {
		return m.IcmpCode
	}
	return 0
}

func (m *TracerouteResponse) GetMpls() map[string]string {
	if m != nil {
		return m.Mpls
	}
	return nil
}

func (m *TracerouteResponse) GetAsPath() []int32 {
	if m != nil {
		return m.AsPath
	}
	return nil
}

// Package defines a single package file to be placed on the target.
type Package struct {
	// Destination path and filename of the package.
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// Version of the package. (vendor internal name)
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Indicates that the package should be made active after receipt on
	// the device. For system image packages, the new image is expected to
	// be active after a reboot.
	Activate bool `protobuf:"varint,5,opt,name=activate,proto3" json:"activate,omitempty"`
	// Details for the device to download the package from a remote location.
	RemoteDownload       *common.RemoteDownload `protobuf:"bytes,6,opt,name=remote_download,json=remoteDownload,proto3" json:"remote_download,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Package) Reset()         { *m = Package{} }
func (m *Package) String() string { return proto.CompactTextString(m) }
func (*Package) ProtoMessage()    {}
func (*Package) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{14}
}

func (m *Package) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Package.Unmarshal(m, b)
}
func (m *Package) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Package.Marshal(b, m, deterministic)
}
func (m *Package) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Package.Merge(m, src)
}
func (m *Package) XXX_Size() int {
	return xxx_messageInfo_Package.Size(m)
}
func (m *Package) XXX_DiscardUnknown() {
	xxx_messageInfo_Package.DiscardUnknown(m)
}

var xxx_messageInfo_Package proto.InternalMessageInfo

func (m *Package) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *Package) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Package) GetActivate() bool {
	if m != nil {
		return m.Activate
	}
	return false
}

func (m *Package) GetRemoteDownload() *common.RemoteDownload {
	if m != nil {
		return m.RemoteDownload
	}
	return nil
}

// SetPackageRequest will place the package onto the target and optionally mark
// it as the next bootable image. The initial message must be a package
// message containing the filename and information about the file. Following the
// initial message the contents are then streamed in maximum 64k chunks. The
// final message must be a hash message contains the hash of the file contents.
type SetPackageRequest struct {
	// Types that are valid to be assigned to Request:
	//	*SetPackageRequest_Package
	//	*SetPackageRequest_Contents
	//	*SetPackageRequest_Hash
	Request              isSetPackageRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SetPackageRequest) Reset()         { *m = SetPackageRequest{} }
func (m *SetPackageRequest) String() string { return proto.CompactTextString(m) }
func (*SetPackageRequest) ProtoMessage()    {}
func (*SetPackageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{15}
}

func (m *SetPackageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetPackageRequest.Unmarshal(m, b)
}
func (m *SetPackageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetPackageRequest.Marshal(b, m, deterministic)
}
func (m *SetPackageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPackageRequest.Merge(m, src)
}
func (m *SetPackageRequest) XXX_Size() int {
	return xxx_messageInfo_SetPackageRequest.Size(m)
}
func (m *SetPackageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPackageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetPackageRequest proto.InternalMessageInfo

type isSetPackageRequest_Request interface {
	isSetPackageRequest_Request()
}

type SetPackageRequest_Package struct {
	Package *Package `protobuf:"bytes,1,opt,name=package,proto3,oneof"`
}

type SetPackageRequest_Contents struct {
	Contents []byte `protobuf:"bytes,2,opt,name=contents,proto3,oneof"`
}

type SetPackageRequest_Hash struct {
	Hash *types.HashType `protobuf:"bytes,3,opt,name=hash,proto3,oneof"`
}

func (*SetPackageRequest_Package) isSetPackageRequest_Request() {}

func (*SetPackageRequest_Contents) isSetPackageRequest_Request() {}

func (*SetPackageRequest_Hash) isSetPackageRequest_Request() {}

func (m *SetPackageRequest) GetRequest() isSetPackageRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SetPackageRequest) GetPackage() *Package {
	if x, ok := m.GetRequest().(*SetPackageRequest_Package); ok {
		return x.Package
	}
	return nil
}

func (m *SetPackageRequest) GetContents() []byte {
	if x, ok := m.GetRequest().(*SetPackageRequest_Contents); ok {
		return x.Contents
	}
	return nil
}

func (m *SetPackageRequest) GetHash() *types.HashType {
	if x, ok := m.GetRequest().(*SetPackageRequest_Hash); ok {
		return x.Hash
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SetPackageRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SetPackageRequest_OneofMarshaler, _SetPackageRequest_OneofUnmarshaler, _SetPackageRequest_OneofSizer, []interface{}{
		(*SetPackageRequest_Package)(nil),
		(*SetPackageRequest_Contents)(nil),
		(*SetPackageRequest_Hash)(nil),
	}
}

func _SetPackageRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SetPackageRequest)
	// request
	switch x := m.Request.(type) {
	case *SetPackageRequest_Package:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Package); err != nil {
			return err
		}
	case *SetPackageRequest_Contents:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Contents)
	case *SetPackageRequest_Hash:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hash); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SetPackageRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _SetPackageRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SetPackageRequest)
	switch tag {
	case 1: // request.package
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Package)
		err := b.DecodeMessage(msg)
		m.Request = &SetPackageRequest_Package{msg}
		return true, err
	case 2: // request.contents
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Request = &SetPackageRequest_Contents{x}
		return true, err
	case 3: // request.hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.HashType)
		err := b.DecodeMessage(msg)
		m.Request = &SetPackageRequest_Hash{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SetPackageRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SetPackageRequest)
	// request
	switch x := m.Request.(type) {
	case *SetPackageRequest_Package:
		s := proto.Size(x.Package)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SetPackageRequest_Contents:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Contents)))
		n += len(x.Contents)
	case *SetPackageRequest_Hash:
		s := proto.Size(x.Hash)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SetPackageResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetPackageResponse) Reset()         { *m = SetPackageResponse{} }
func (m *SetPackageResponse) String() string { return proto.CompactTextString(m) }
func (*SetPackageResponse) ProtoMessage()    {}
func (*SetPackageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746080b643370b3b, []int{16}
}

func (m *SetPackageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetPackageResponse.Unmarshal(m, b)
}
func (m *SetPackageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetPackageResponse.Marshal(b, m, deterministic)
}
func (m *SetPackageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPackageResponse.Merge(m, src)
}
func (m *SetPackageResponse) XXX_Size() int {
	return xxx_messageInfo_SetPackageResponse.Size(m)
}
func (m *SetPackageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPackageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetPackageResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("gnoi.system.RebootMethod", RebootMethod_name, RebootMethod_value)
	proto.RegisterEnum("gnoi.system.TracerouteRequest_L4Protocol", TracerouteRequest_L4Protocol_name, TracerouteRequest_L4Protocol_value)
	proto.RegisterEnum("gnoi.system.TracerouteResponse_State", TracerouteResponse_State_name, TracerouteResponse_State_value)
	proto.RegisterType((*SwitchControlProcessorRequest)(nil), "gnoi.system.SwitchControlProcessorRequest")
	proto.RegisterType((*SwitchControlProcessorResponse)(nil), "gnoi.system.SwitchControlProcessorResponse")
	proto.RegisterType((*RebootRequest)(nil), "gnoi.system.RebootRequest")
	proto.RegisterType((*RebootResponse)(nil), "gnoi.system.RebootResponse")
	proto.RegisterType((*CancelRebootRequest)(nil), "gnoi.system.CancelRebootRequest")
	proto.RegisterType((*CancelRebootResponse)(nil), "gnoi.system.CancelRebootResponse")
	proto.RegisterType((*RebootStatusRequest)(nil), "gnoi.system.RebootStatusRequest")
	proto.RegisterType((*RebootStatusResponse)(nil), "gnoi.system.RebootStatusResponse")
	proto.RegisterType((*TimeRequest)(nil), "gnoi.system.TimeRequest")
	proto.RegisterType((*TimeResponse)(nil), "gnoi.system.TimeResponse")
	proto.RegisterType((*PingRequest)(nil), "gnoi.system.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "gnoi.system.PingResponse")
	proto.RegisterType((*TracerouteRequest)(nil), "gnoi.system.TracerouteRequest")
	proto.RegisterType((*TracerouteResponse)(nil), "gnoi.system.TracerouteResponse")
	proto.RegisterMapType((map[string]string)(nil), "gnoi.system.TracerouteResponse.MplsEntry")
	proto.RegisterType((*Package)(nil), "gnoi.system.Package")
	proto.RegisterType((*SetPackageRequest)(nil), "gnoi.system.SetPackageRequest")
	proto.RegisterType((*SetPackageResponse)(nil), "gnoi.system.SetPackageResponse")
}

func init() { proto.RegisterFile("system/system.proto", fileDescriptor_746080b643370b3b) }

var fileDescriptor_746080b643370b3b = []byte{
	// 1590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x4f, 0x73, 0xe3, 0x48,
	0x15, 0x8f, 0xfc, 0xdf, 0xcf, 0x49, 0x46, 0xd3, 0x09, 0xb3, 0x1a, 0x2f, 0xec, 0x06, 0xd5, 0x42,
	0x65, 0x16, 0xca, 0xc9, 0x66, 0xb6, 0x6a, 0x29, 0xa8, 0x81, 0xf2, 0xd8, 0xca, 0x26, 0xb5, 0x8e,
	0x6d, 0xda, 0x32, 0xc3, 0x4d, 0xd5, 0x91, 0x7b, 0x62, 0xd5, 0x48, 0x6a, 0xa1, 0x6e, 0x7b, 0x36,
	0x9c, 0xb9, 0x71, 0xe1, 0x40, 0x51, 0x14, 0x37, 0xbe, 0x06, 0x1f, 0x83, 0x0b, 0xdf, 0x83, 0x4f,
	0x40, 0x75, 0xb7, 0xe4, 0xc8, 0x8e, 0x27, 0x99, 0xe2, 0x92, 0xf4, 0xfb, 0xd3, 0xaf, 0xdf, 0xfb,
	0xbd, 0x5f, 0xb7, 0x9e, 0xe1, 0x80, 0xdf, 0x72, 0x41, 0xa3, 0x13, 0xfd, 0xaf, 0x93, 0xa4, 0x4c,
	0x30, 0xd4, 0xba, 0x89, 0x59, 0xd0, 0xd1, 0xaa, 0x76, 0xe7, 0x26, 0x10, 0xf3, 0xc5, 0x75, 0xc7,
	0x67, 0xd1, 0x09, 0x4b, 0x68, 0xec, 0xb3, 0xf8, 0x6d, 0x70, 0x73, 0x22, 0x5d, 0x4e, 0x7c, 0x16,
	0x45, 0x2c, 0xce, 0xfe, 0xe9, 0xcd, 0xed, 0x9f, 0x3f, 0xe0, 0x2f, 0x6e, 0x13, 0xca, 0xf5, 0x5f,
	0xed, 0x6d, 0xff, 0x1e, 0x7e, 0x34, 0x79, 0x1f, 0x08, 0x7f, 0xde, 0x63, 0xb1, 0x48, 0x59, 0x38,
	0x4e, 0x99, 0x4f, 0x39, 0x67, 0x29, 0xa6, 0x7f, 0x58, 0x50, 0x2e, 0xd0, 0x37, 0xf0, 0xd4, 0xd7,
	0x26, 0x2f, 0xc9, 0x6d, 0x96, 0x71, 0x64, 0x1c, 0xb7, 0xce, 0xa0, 0xa3, 0xf2, 0x1c, 0x13, 0x31,
	0xc7, 0xa6, 0xbf, 0xb1, 0xdf, 0xfe, 0xb3, 0x01, 0x9f, 0x7d, 0x28, 0x34, 0x4f, 0x58, 0xcc, 0xe9,
	0xff, 0x1d, 0x1b, 0x59, 0x50, 0x5f, 0xd2, 0x94, 0x07, 0x2c, 0xb6, 0x4a, 0x47, 0xc6, 0x71, 0x13,
	0xe7, 0x22, 0x7a, 0x06, 0xb5, 0x45, 0x22, 0x82, 0x88, 0x5a, 0xe5, 0x23, 0xe3, 0xb8, 0x8c, 0x33,
	0xc9, 0xfe, 0x97, 0x01, 0x7b, 0x98, 0x5e, 0x33, 0x26, 0xf2, 0xc2, 0xbe, 0x82, 0x5a, 0x44, 0xc5,
	0x9c, 0xcd, 0xd4, 0x89, 0xfb, 0x67, 0xcf, 0x3b, 0x05, 0xd4, 0x3b, 0xda, 0xf7, 0x4a, 0x39, 0xe0,
	0xcc, 0x11, 0x1d, 0x42, 0x75, 0x46, 0x43, 0x72, 0xab, 0x0e, 0xad, 0x60, 0x2d, 0xc8, 0x64, 0x22,
	0xca, 0x39, 0xb9, 0xd1, 0x67, 0x36, 0x71, 0x2e, 0xa2, 0x53, 0xd8, 0xe3, 0x8b, 0x6b, 0x9f, 0x45,
	0x09, 0x8b, 0x69, 0x2c, 0xb8, 0x55, 0x39, 0x2a, 0x6f, 0xd4, 0xb6, 0xee, 0x20, 0x4f, 0x78, 0xcb,
	0x52, 0x9f, 0x5a, 0xd5, 0x23, 0xe3, 0xb8, 0x81, 0xb5, 0x60, 0x9b, 0xb0, 0x9f, 0xe7, 0xae, 0x91,
	0xb3, 0x09, 0x1c, 0xf4, 0x48, 0xec, 0xd3, 0x70, 0xbd, 0xa6, 0x42, 0x2a, 0xc6, 0x23, 0xa9, 0x94,
	0x1e, 0x49, 0xc5, 0x7e, 0x06, 0x87, 0xeb, 0x47, 0x64, 0x47, 0x7f, 0x0b, 0x07, 0x5a, 0x33, 0x11,
	0x44, 0x2c, 0x78, 0x7e, 0xf4, 0xbd, 0x03, 0x8c, 0xc7, 0x0e, 0xf8, 0x93, 0x01, 0x87, 0xeb, 0x91,
	0x32, 0x5a, 0x3c, 0x83, 0x1a, 0xf1, 0x45, 0xb0, 0xd4, 0x45, 0x34, 0x70, 0x26, 0x21, 0x04, 0x95,
	0xf7, 0x24, 0x10, 0x19, 0xfa, 0x6a, 0xad, 0x74, 0x73, 0x1a, 0x2b, 0xe4, 0xa5, 0x6e, 0x4e, 0x15,
	0x07, 0x52, 0x4a, 0x38, 0x8b, 0xad, 0x8a, 0x02, 0x21, 0x93, 0x24, 0xb8, 0x3e, 0x5b, 0xc4, 0x42,
	0x81, 0xbb, 0x87, 0xb5, 0x60, 0xef, 0x41, 0xcb, 0x0d, 0x22, 0x9a, 0xd5, 0x61, 0xdb, 0xb0, 0xab,
	0xc5, 0x2c, 0x19, 0x04, 0x15, 0x45, 0x27, 0x43, 0x1f, 0xa0, 0xc8, 0xf4, 0xcf, 0x12, 0xb4, 0xc6,
	0x41, 0x7c, 0x93, 0xd7, 0x7e, 0x04, 0xad, 0x19, 0xe5, 0x22, 0x88, 0x89, 0x90, 0x94, 0xd4, 0xd0,
	0x17, 0x55, 0x32, 0x25, 0xce, 0x16, 0xb2, 0xb1, 0x9a, 0xaf, 0x99, 0x74, 0x97, 0x92, 0xcc, 0xbf,
	0x9a, 0xa5, 0x84, 0xda, 0xd0, 0x08, 0x62, 0x41, 0xd3, 0x25, 0x09, 0x55, 0x09, 0x65, 0xbc, 0x92,
	0x57, 0x20, 0x54, 0x95, 0x7e, 0x05, 0x02, 0x0f, 0xfe, 0x48, 0xad, 0x9a, 0x0a, 0xa2, 0xd6, 0xe8,
	0xa7, 0xf0, 0x64, 0xc6, 0xbc, 0x98, 0x09, 0xef, 0x6d, 0x4a, 0x6e, 0x22, 0x1a, 0x0b, 0xab, 0xae,
	0xd0, 0xdc, 0x9b, 0xb1, 0x21, 0x13, 0xe7, 0x99, 0x12, 0x7d, 0x01, 0xfb, 0x99, 0x5f, 0x4a, 0x39,
	0x0b, 0x97, 0xd4, 0x6a, 0x28, 0xb7, 0x5d, 0xe5, 0x86, 0xb5, 0x0e, 0x9d, 0x02, 0x84, 0x2f, 0xd5,
	0x8b, 0xe1, 0xb3, 0xd0, 0x6a, 0xaa, 0x0b, 0x63, 0xea, 0xd6, 0x0e, 0x5e, 0x8e, 0x33, 0x3d, 0x2e,
	0xf8, 0xd8, 0x7f, 0x2f, 0xc1, 0xae, 0xc6, 0xe8, 0xae, 0xab, 0x19, 0x04, 0xc6, 0x1a, 0x04, 0x39,
	0xc0, 0x25, 0x5d, 0x90, 0x5c, 0xab, 0x82, 0xe8, 0x0a, 0x15, 0xb5, 0x96, 0xa0, 0xa4, 0xd4, 0xa7,
	0xc1, 0x92, 0xce, 0x14, 0x28, 0x55, 0xbc, 0x92, 0xd1, 0x73, 0x68, 0x44, 0x41, 0xec, 0xa9, 0x38,
	0x1a, 0x98, 0x7a, 0x14, 0xc4, 0xb2, 0x8f, 0xd2, 0x44, 0x96, 0x37, 0xda, 0x54, 0xd3, 0x26, 0xb2,
	0xbc, 0xc9, 0x4d, 0x11, 0xf9, 0x5e, 0x9b, 0xea, 0xd9, 0x2e, 0xf2, 0xbd, 0x32, 0x7d, 0x02, 0x75,
	0x2e, 0x66, 0xde, 0x8c, 0x2e, 0x15, 0x1c, 0x65, 0x5c, 0xe3, 0x62, 0xd6, 0xa7, 0x4b, 0xd9, 0xb0,
	0xeb, 0x5b, 0x41, 0xb9, 0xd5, 0xd2, 0x0d, 0x53, 0x82, 0xcc, 0x8d, 0x4b, 0x2e, 0xc4, 0x3e, 0xb5,
	0x76, 0x75, 0x6e, 0xb9, 0x8c, 0x4c, 0x28, 0x0b, 0x11, 0x5a, 0x7b, 0x4a, 0x2d, 0x97, 0xf6, 0x5f,
	0xca, 0xf0, 0xd4, 0x4d, 0x89, 0x4f, 0x53, 0xb6, 0x10, 0x39, 0xf1, 0x3e, 0x88, 0xcf, 0x06, 0xb9,
	0x4a, 0xf7, 0xc9, 0xf5, 0x39, 0xb4, 0x82, 0x38, 0x10, 0x01, 0x09, 0x3d, 0x79, 0x52, 0x59, 0xb1,
	0x1b, 0x32, 0x95, 0x2b, 0x42, 0x59, 0x8d, 0x2a, 0x54, 0x84, 0x19, 0x72, 0x35, 0x59, 0xa7, 0xd8,
	0x4e, 0xa6, 0x2d, 0xc4, 0xa9, 0x7d, 0x1c, 0x71, 0xea, 0x8f, 0x12, 0xa7, 0xf1, 0x38, 0x71, 0xd0,
	0x25, 0x40, 0xf8, 0xf5, 0x06, 0xd5, 0x5e, 0xac, 0xbd, 0xcd, 0xf7, 0xb0, 0xeb, 0x0c, 0xbe, 0x2e,
	0x84, 0x5a, 0x6d, 0xb6, 0x8f, 0x01, 0xee, 0x2c, 0xa8, 0x01, 0x95, 0xcb, 0xde, 0xd5, 0xd8, 0xdc,
	0x41, 0x75, 0x28, 0xbb, 0xbd, 0xb1, 0x69, 0xc8, 0xc5, 0xb4, 0x3f, 0x36, 0x4b, 0xf6, 0x7f, 0xaa,
	0x80, 0x8a, 0x61, 0x33, 0xce, 0xbe, 0x00, 0xb3, 0x00, 0xb4, 0x17, 0x93, 0x28, 0xef, 0xce, 0x93,
	0x82, 0x7e, 0x48, 0x22, 0x8a, 0x4e, 0xe0, 0xa0, 0xe8, 0x4a, 0x66, 0xb3, 0x94, 0x72, 0x9e, 0xb5,
	0x0b, 0x15, 0x4c, 0x5d, 0x6d, 0x91, 0xd8, 0xcf, 0x59, 0xc2, 0x73, 0x8e, 0xcb, 0xb5, 0xec, 0x64,
	0x42, 0xfc, 0x77, 0x54, 0x78, 0xea, 0x3e, 0xeb, 0x66, 0x81, 0x56, 0x4d, 0xe4, 0xad, 0x36, 0xa1,
	0x3c, 0x67, 0x89, 0xea, 0x57, 0x15, 0xcb, 0xa5, 0x7c, 0xf2, 0xf3, 0xb3, 0x6a, 0xfa, 0xc9, 0x27,
	0x77, 0x07, 0xa8, 0x84, 0xeb, 0x4a, 0xad, 0xd6, 0x72, 0x7f, 0x2a, 0x44, 0xc6, 0x69, 0xb9, 0x44,
	0xbf, 0x82, 0x2a, 0x17, 0x44, 0xd0, 0x0c, 0xe9, 0x9f, 0x7c, 0x10, 0x69, 0x0d, 0x49, 0x47, 0xbe,
	0xd5, 0x14, 0xeb, 0x3d, 0xe8, 0x53, 0x68, 0x06, 0x7e, 0x94, 0x78, 0x3e, 0x9b, 0x51, 0x0b, 0x34,
	0xf1, 0xa5, 0xa2, 0xc7, 0x66, 0x14, 0xbd, 0x82, 0x4a, 0x94, 0x84, 0xf2, 0xa6, 0xc8, 0x0f, 0xc1,
	0x8b, 0xc7, 0x02, 0x5f, 0x25, 0x21, 0x77, 0x62, 0x91, 0xde, 0x62, 0xb5, 0x4d, 0x92, 0x96, 0x70,
	0x2f, 0x21, 0x62, 0x6e, 0xed, 0x1e, 0x95, 0x25, 0x69, 0x09, 0x97, 0x9f, 0x91, 0xf6, 0x37, 0xd0,
	0x5c, 0xf9, 0xca, 0x82, 0xde, 0xd1, 0xdb, 0xac, 0x29, 0x72, 0x29, 0x6f, 0xe8, 0x92, 0x84, 0x8b,
	0xfc, 0xa5, 0xd5, 0xc2, 0x2f, 0x4b, 0xbf, 0x30, 0xec, 0xff, 0x1a, 0x50, 0x55, 0xe9, 0xa3, 0x16,
	0xd4, 0xfb, 0xce, 0x79, 0x77, 0x3a, 0x70, 0xcd, 0x1d, 0xc9, 0x8b, 0xe1, 0x68, 0xe8, 0x98, 0x86,
	0x54, 0x4f, 0x87, 0xdf, 0x0d, 0x47, 0x6f, 0x86, 0x66, 0x69, 0x45, 0x97, 0x32, 0x3a, 0x04, 0xf3,
	0x62, 0x34, 0x71, 0xbd, 0xe9, 0x10, 0x3b, 0xdd, 0xde, 0x45, 0xf7, 0xf5, 0xc0, 0x31, 0x2b, 0xe8,
	0x13, 0x38, 0x18, 0x3a, 0xee, 0x9b, 0x11, 0xfe, 0x6e, 0xcd, 0x50, 0x45, 0x16, 0x1c, 0x8e, 0xf1,
	0xc8, 0x1d, 0xf5, 0x46, 0x83, 0x35, 0x4b, 0x4d, 0x6e, 0x99, 0x8c, 0xa6, 0xb8, 0xe7, 0x78, 0x78,
	0x34, 0x75, 0x1d, 0xef, 0xbc, 0x7b, 0x39, 0x70, 0xfa, 0x66, 0x5d, 0x6e, 0x39, 0xc7, 0xdd, 0x6f,
	0xaf, 0x9c, 0xa1, 0xdb, 0x75, 0x2f, 0x47, 0x43, 0x6f, 0xe8, 0x38, 0x7d, 0xa7, 0x6f, 0x36, 0xd0,
	0x3e, 0xc0, 0x18, 0x8f, 0x2e, 0x2e, 0x5f, 0x5f, 0xba, 0x4e, 0xdf, 0x6c, 0xea, 0xe0, 0x4e, 0xcf,
	0xe9, 0x3b, 0xc3, 0x9e, 0xe3, 0xfd, 0xee, 0x72, 0x34, 0x50, 0x1b, 0x4c, 0x40, 0x3f, 0x80, 0xa7,
	0x05, 0x4b, 0x6f, 0xea, 0x8e, 0xce, 0xcf, 0xcd, 0x96, 0xfd, 0x0f, 0x03, 0xea, 0x63, 0xe2, 0xbf,
	0x93, 0x43, 0x40, 0x1b, 0x1a, 0x6f, 0x83, 0x90, 0x16, 0x68, 0xbc, 0x92, 0x8b, 0x23, 0x55, 0x65,
	0x7d, 0xa4, 0x6a, 0x43, 0x43, 0x7d, 0x80, 0x25, 0x49, 0xf4, 0x58, 0xb2, 0x92, 0xd1, 0x2b, 0x78,
	0x92, 0xd2, 0x88, 0x09, 0xea, 0xcd, 0xd8, 0xfb, 0x38, 0x64, 0x64, 0xa6, 0x58, 0xd8, 0x3a, 0x3b,
	0xd4, 0xed, 0xc6, 0xca, 0xd8, 0xcf, 0x6c, 0x78, 0x3f, 0x5d, 0x93, 0xed, 0xbf, 0x1a, 0xf0, 0x74,
	0x42, 0x45, 0x96, 0xdf, 0xdd, 0x28, 0x51, 0x4f, 0xb4, 0x26, 0x1b, 0x06, 0x0f, 0xd7, 0xb8, 0x93,
	0x79, 0x5f, 0xec, 0xe0, 0xdc, 0x0d, 0xfd, 0x10, 0x1a, 0x72, 0x46, 0xcc, 0x06, 0x1b, 0xe3, 0x78,
	0xf7, 0x62, 0x07, 0xaf, 0x34, 0xe8, 0x0b, 0xa8, 0xcc, 0x09, 0x9f, 0xab, 0x9b, 0xd6, 0x3a, 0xdb,
	0xd7, 0xc1, 0x2e, 0x08, 0x9f, 0xbb, 0xb7, 0x89, 0x0c, 0xa3, 0xac, 0xaf, 0x9b, 0x50, 0x4f, 0xb3,
	0x19, 0xe0, 0x10, 0x50, 0x31, 0x2b, 0x4d, 0xd0, 0x2f, 0x03, 0xd8, 0x2d, 0x4e, 0x85, 0x45, 0xb6,
	0x28, 0x12, 0xf5, 0x46, 0x83, 0xbe, 0x69, 0xa0, 0x3d, 0x68, 0x8e, 0x47, 0x6f, 0x1c, 0xdc, 0x5f,
	0xd1, 0xe8, 0xa2, 0x3b, 0x70, 0xcd, 0xb2, 0x5c, 0xbd, 0xe9, 0xe2, 0x2b, 0xb3, 0x22, 0x9f, 0x9d,
	0xe1, 0xe4, 0xdc, 0xac, 0xa2, 0x26, 0x54, 0xb1, 0x33, 0x71, 0x5c, 0xb3, 0x26, 0xa3, 0xa9, 0x6d,
	0xd3, 0xb1, 0x59, 0x3f, 0xfb, 0x5b, 0x15, 0x6a, 0x13, 0x55, 0x2d, 0xfa, 0x0d, 0x54, 0xe4, 0x67,
	0x14, 0x59, 0xeb, 0x18, 0xdc, 0x4d, 0x1f, 0xed, 0xe7, 0x5b, 0x2c, 0xd9, 0xac, 0xb6, 0x73, 0x6a,
	0xa0, 0xdf, 0x02, 0xdc, 0xdd, 0x36, 0xf4, 0xd9, 0xc3, 0x2f, 0x69, 0xfb, 0xf3, 0x47, 0xae, 0xa9,
	0x0a, 0xf9, 0x0a, 0x2a, 0xea, 0x2b, 0xb9, 0x9e, 0x53, 0x61, 0x8a, 0xda, 0xc8, 0xa9, 0x38, 0x50,
	0xd9, 0x3b, 0x32, 0xa3, 0x3b, 0x78, 0x37, 0x32, 0xba, 0xc7, 0x86, 0x8d, 0x8c, 0xee, 0xf7, 0xc5,
	0xde, 0x39, 0x36, 0x10, 0x87, 0x67, 0xdb, 0x7f, 0x6b, 0xa0, 0x2f, 0xd7, 0xb7, 0x3f, 0xf4, 0x5b,
	0xa7, 0xfd, 0xb3, 0x8f, 0xf2, 0x5d, 0xd5, 0xd1, 0x83, 0x9a, 0x26, 0x04, 0x6a, 0x6f, 0xf9, 0xed,
	0x90, 0x07, 0xfd, 0x74, 0xab, 0x6d, 0x15, 0x64, 0x9a, 0xb3, 0x4a, 0x0f, 0xc1, 0xe8, 0x68, 0x8b,
	0xfb, 0xda, 0xa4, 0xdd, 0xfe, 0xf1, 0x03, 0x1e, 0xc5, 0xb0, 0xc5, 0xe9, 0x7d, 0x23, 0xec, 0x96,
	0xdf, 0x0e, 0x1b, 0x61, 0xb7, 0x8e, 0xfe, 0x3b, 0xaf, 0x1b, 0xff, 0xfe, 0x75, 0xf5, 0xb4, 0xf3,
	0x55, 0xe7, 0xf4, 0xba, 0xa6, 0xbe, 0xb2, 0x2f, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x1c,
	0x6a, 0xa7, 0xc1, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SystemClient is the client API for System service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SystemClient interface {
	// Ping executes the ping command on the target and streams back
	// the results.  Some targets may not stream any results until all
	// results are in.  If a packet count is not explicitly provided,
	// 5 is used.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (System_PingClient, error)
	// Traceroute executes the traceroute command on the target and streams back
	// the results.  Some targets may not stream any results until all
	// results are in.  If a hop count is not explicitly provided,
	// 30 is used.
	Traceroute(ctx context.Context, in *TracerouteRequest, opts ...grpc.CallOption) (System_TracerouteClient, error)
	// Time returns the current time on the target.  Time is typically used to
	// test if a target is actually responding.
	Time(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*TimeResponse, error)
	// SetPackage places a software package (possibly including bootable images)
	// on the target. The file is sent in sequential messages, each message
	// up to 64KB of data. A final message must be sent that includes the hash
	// of the data sent. An error is returned if the location does not exist or
	// there is an error writing the data. If no checksum is received, the target
	// must assume the operation is incomplete and remove the partially
	// transmitted file. The target should initially write the file to a temporary
	// location so a failure does not destroy the original file.
	SetPackage(ctx context.Context, opts ...grpc.CallOption) (System_SetPackageClient, error)
	// SwitchControlProcessor will switch from the current route processor to the
	// provided route processor. If the current route processor is the same as the
	// one provided it is a NOOP. If the target does not exist an error is
	// returned.
	SwitchControlProcessor(ctx context.Context, in *SwitchControlProcessorRequest, opts ...grpc.CallOption) (*SwitchControlProcessorResponse, error)
	// Reboot causes the target to reboot, possibly at some point in the future.
	// If the method of reboot is not supported then the Reboot RPC will fail.
	// If the reboot is immediate the command will block until the subcomponents
	// have restarted.
	// If a reboot on the active control processor is pending the service must
	// reject all other reboot requests.
	// If a reboot request for active control processor is initiated with other
	// pending reboot requests it must be rejected.
	Reboot(ctx context.Context, in *RebootRequest, opts ...grpc.CallOption) (*RebootResponse, error)
	// RebootStatus returns the status of reboot for the target.
	RebootStatus(ctx context.Context, in *RebootStatusRequest, opts ...grpc.CallOption) (*RebootStatusResponse, error)
	// CancelReboot cancels any pending reboot request.
	CancelReboot(ctx context.Context, in *CancelRebootRequest, opts ...grpc.CallOption) (*CancelRebootResponse, error)
}

type systemClient struct {
	cc *grpc.ClientConn
}

func NewSystemClient(cc *grpc.ClientConn) SystemClient {
	return &systemClient{cc}
}

func (c *systemClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (System_PingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_System_serviceDesc.Streams[0], "/gnoi.system.System/Ping", opts...)
	if err != nil {
		return nil, err
	}
	x := &systemPingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type System_PingClient interface {
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type systemPingClient struct {
	grpc.ClientStream
}

func (x *systemPingClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *systemClient) Traceroute(ctx context.Context, in *TracerouteRequest, opts ...grpc.CallOption) (System_TracerouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_System_serviceDesc.Streams[1], "/gnoi.system.System/Traceroute", opts...)
	if err != nil {
		return nil, err
	}
	x := &systemTracerouteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type System_TracerouteClient interface {
	Recv() (*TracerouteResponse, error)
	grpc.ClientStream
}

type systemTracerouteClient struct {
	grpc.ClientStream
}

func (x *systemTracerouteClient) Recv() (*TracerouteResponse, error) {
	m := new(TracerouteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *systemClient) Time(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*TimeResponse, error) {
	out := new(TimeResponse)
	err := c.cc.Invoke(ctx, "/gnoi.system.System/Time", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SetPackage(ctx context.Context, opts ...grpc.CallOption) (System_SetPackageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_System_serviceDesc.Streams[2], "/gnoi.system.System/SetPackage", opts...)
	if err != nil {
		return nil, err
	}
	x := &systemSetPackageClient{stream}
	return x, nil
}

type System_SetPackageClient interface {
	Send(*SetPackageRequest) error
	CloseAndRecv() (*SetPackageResponse, error)
	grpc.ClientStream
}

type systemSetPackageClient struct {
	grpc.ClientStream
}

func (x *systemSetPackageClient) Send(m *SetPackageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *systemSetPackageClient) CloseAndRecv() (*SetPackageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SetPackageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *systemClient) SwitchControlProcessor(ctx context.Context, in *SwitchControlProcessorRequest, opts ...grpc.CallOption) (*SwitchControlProcessorResponse, error) {
	out := new(SwitchControlProcessorResponse)
	err := c.cc.Invoke(ctx, "/gnoi.system.System/SwitchControlProcessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) Reboot(ctx context.Context, in *RebootRequest, opts ...grpc.CallOption) (*RebootResponse, error) {
	out := new(RebootResponse)
	err := c.cc.Invoke(ctx, "/gnoi.system.System/Reboot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RebootStatus(ctx context.Context, in *RebootStatusRequest, opts ...grpc.CallOption) (*RebootStatusResponse, error) {
	out := new(RebootStatusResponse)
	err := c.cc.Invoke(ctx, "/gnoi.system.System/RebootStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CancelReboot(ctx context.Context, in *CancelRebootRequest, opts ...grpc.CallOption) (*CancelRebootResponse, error) {
	out := new(CancelRebootResponse)
	err := c.cc.Invoke(ctx, "/gnoi.system.System/CancelReboot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServer is the server API for System service.
type SystemServer interface {
	// Ping executes the ping command on the target and streams back
	// the results.  Some targets may not stream any results until all
	// results are in.  If a packet count is not explicitly provided,
	// 5 is used.
	Ping(*PingRequest, System_PingServer) error
	// Traceroute executes the traceroute command on the target and streams back
	// the results.  Some targets may not stream any results until all
	// results are in.  If a hop count is not explicitly provided,
	// 30 is used.
	Traceroute(*TracerouteRequest, System_TracerouteServer) error
	// Time returns the current time on the target.  Time is typically used to
	// test if a target is actually responding.
	Time(context.Context, *TimeRequest) (*TimeResponse, error)
	// SetPackage places a software package (possibly including bootable images)
	// on the target. The file is sent in sequential messages, each message
	// up to 64KB of data. A final message must be sent that includes the hash
	// of the data sent. An error is returned if the location does not exist or
	// there is an error writing the data. If no checksum is received, the target
	// must assume the operation is incomplete and remove the partially
	// transmitted file. The target should initially write the file to a temporary
	// location so a failure does not destroy the original file.
	SetPackage(System_SetPackageServer) error
	// SwitchControlProcessor will switch from the current route processor to the
	// provided route processor. If the current route processor is the same as the
	// one provided it is a NOOP. If the target does not exist an error is
	// returned.
	SwitchControlProcessor(context.Context, *SwitchControlProcessorRequest) (*SwitchControlProcessorResponse, error)
	// Reboot causes the target to reboot, possibly at some point in the future.
	// If the method of reboot is not supported then the Reboot RPC will fail.
	// If the reboot is immediate the command will block until the subcomponents
	// have restarted.
	// If a reboot on the active control processor is pending the service must
	// reject all other reboot requests.
	// If a reboot request for active control processor is initiated with other
	// pending reboot requests it must be rejected.
	Reboot(context.Context, *RebootRequest) (*RebootResponse, error)
	// RebootStatus returns the status of reboot for the target.
	RebootStatus(context.Context, *RebootStatusRequest) (*RebootStatusResponse, error)
	// CancelReboot cancels any pending reboot request.
	CancelReboot(context.Context, *CancelRebootRequest) (*CancelRebootResponse, error)
}

func RegisterSystemServer(s *grpc.Server, srv SystemServer) {
	s.RegisterService(&_System_serviceDesc, srv)
}

func _System_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SystemServer).Ping(m, &systemPingServer{stream})
}

type System_PingServer interface {
	Send(*PingResponse) error
	grpc.ServerStream
}

type systemPingServer struct {
	grpc.ServerStream
}

func (x *systemPingServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _System_Traceroute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TracerouteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SystemServer).Traceroute(m, &systemTracerouteServer{stream})
}

type System_TracerouteServer interface {
	Send(*TracerouteResponse) error
	grpc.ServerStream
}

type systemTracerouteServer struct {
	grpc.ServerStream
}

func (x *systemTracerouteServer) Send(m *TracerouteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _System_Time_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).Time(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.system.System/Time",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).Time(ctx, req.(*TimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SetPackage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SystemServer).SetPackage(&systemSetPackageServer{stream})
}

type System_SetPackageServer interface {
	SendAndClose(*SetPackageResponse) error
	Recv() (*SetPackageRequest, error)
	grpc.ServerStream
}

type systemSetPackageServer struct {
	grpc.ServerStream
}

func (x *systemSetPackageServer) SendAndClose(m *SetPackageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *systemSetPackageServer) Recv() (*SetPackageRequest, error) {
	m := new(SetPackageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _System_SwitchControlProcessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchControlProcessorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SwitchControlProcessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.system.System/SwitchControlProcessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SwitchControlProcessor(ctx, req.(*SwitchControlProcessorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_Reboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).Reboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.system.System/Reboot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).Reboot(ctx, req.(*RebootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RebootStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebootStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RebootStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.system.System/RebootStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RebootStatus(ctx, req.(*RebootStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CancelReboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRebootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CancelReboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.system.System/CancelReboot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CancelReboot(ctx, req.(*CancelRebootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _System_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.system.System",
	HandlerType: (*SystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Time",
			Handler:    _System_Time_Handler,
		},
		{
			MethodName: "SwitchControlProcessor",
			Handler:    _System_SwitchControlProcessor_Handler,
		},
		{
			MethodName: "Reboot",
			Handler:    _System_Reboot_Handler,
		},
		{
			MethodName: "RebootStatus",
			Handler:    _System_RebootStatus_Handler,
		},
		{
			MethodName: "CancelReboot",
			Handler:    _System_CancelReboot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _System_Ping_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Traceroute",
			Handler:       _System_Traceroute_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetPackage",
			Handler:       _System_SetPackage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "system/system.proto",
}
