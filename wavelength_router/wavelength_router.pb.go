// Code generated by protoc-gen-go.
// source: wavelength_router/wavelength_router.proto
// DO NOT EDIT!

/*
Package gnoi_optical is a generated protocol buffer package.

It is generated from these files:
	wavelength_router/wavelength_router.proto

It has these top-level messages:
	AdjustPSDRequest
	AdjustPSDProgress
	AdjustPSDError
	AdjustPSDResponse
	CancelAdjustPSDResponse
*/
package gnoi_optical

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import gnoi_types "github.com/openconfig/gnoi/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AdjustPSDRequest_SignalDirection int32

const (
	AdjustPSDRequest_DIRECTION_UNKNOWN AdjustPSDRequest_SignalDirection = 0
	AdjustPSDRequest_DIRECTION_INPUT   AdjustPSDRequest_SignalDirection = 1
	AdjustPSDRequest_DIRECTION_OUTPUT  AdjustPSDRequest_SignalDirection = 2
)

var AdjustPSDRequest_SignalDirection_name = map[int32]string{
	0: "DIRECTION_UNKNOWN",
	1: "DIRECTION_INPUT",
	2: "DIRECTION_OUTPUT",
}
var AdjustPSDRequest_SignalDirection_value = map[string]int32{
	"DIRECTION_UNKNOWN": 0,
	"DIRECTION_INPUT":   1,
	"DIRECTION_OUTPUT":  2,
}

func (x AdjustPSDRequest_SignalDirection) String() string {
	return proto.EnumName(AdjustPSDRequest_SignalDirection_name, int32(x))
}
func (AdjustPSDRequest_SignalDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

type AdjustPSDProgress_State int32

const (
	AdjustPSDProgress_UNKNOWN  AdjustPSDProgress_State = 0
	AdjustPSDProgress_RUNNING  AdjustPSDProgress_State = 1
	AdjustPSDProgress_COMPLETE AdjustPSDProgress_State = 2
)

var AdjustPSDProgress_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "RUNNING",
	2: "COMPLETE",
}
var AdjustPSDProgress_State_value = map[string]int32{
	"UNKNOWN":  0,
	"RUNNING":  1,
	"COMPLETE": 2,
}

func (x AdjustPSDProgress_State) String() string {
	return proto.EnumName(AdjustPSDProgress_State_name, int32(x))
}
func (AdjustPSDProgress_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type AdjustPSDError_Type int32

const (
	// An unspecified error. Must use the detail value to describe the issue.
	AdjustPSDError_UNSPECIFIED AdjustPSDError_Type = 0
	// An adjustment was requested for a port that is busy (e.g., requesting
	// input adjustment for a port that is currently running an output
	// adjustment)
	AdjustPSDError_PORT_BUSY AdjustPSDError_Type = 1
	// The hardware has failed and cannot complete an adjustment.
	AdjustPSDError_HARDWARE_FAILURE AdjustPSDError_Type = 2
)

var AdjustPSDError_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "PORT_BUSY",
	2: "HARDWARE_FAILURE",
}
var AdjustPSDError_Type_value = map[string]int32{
	"UNSPECIFIED":      0,
	"PORT_BUSY":        1,
	"HARDWARE_FAILURE": 2,
}

func (x AdjustPSDError_Type) String() string {
	return proto.EnumName(AdjustPSDError_Type_name, int32(x))
}
func (AdjustPSDError_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type AdjustPSDRequest struct {
	// Absolute path to the /components/component list member in the OpenConfig
	// model corresponding to the port to perform the adjustment for.
	// (e.g., /components/component[name=amp-1-1])
	Component *gnoi_types.Path `protobuf:"bytes,1,opt,name=component" json:"component,omitempty"`
	// Describes the signal direction that should be adjusted relative to the
	// device. For example, "input" would be the signal entering into the device
	// from the far end device.
	Direction AdjustPSDRequest_SignalDirection `protobuf:"varint,2,opt,name=direction,enum=gnoi.optical.AdjustPSDRequest_SignalDirection" json:"direction,omitempty"`
}

func (m *AdjustPSDRequest) Reset()                    { *m = AdjustPSDRequest{} }
func (m *AdjustPSDRequest) String() string            { return proto.CompactTextString(m) }
func (*AdjustPSDRequest) ProtoMessage()               {}
func (*AdjustPSDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AdjustPSDRequest) GetComponent() *gnoi_types.Path {
	if m != nil {
		return m.Component
	}
	return nil
}

type AdjustPSDProgress struct {
	// The state of the OTDR trace requested. Note that this does not include
	// error states as these should be returned as a gRPC error.
	State AdjustPSDProgress_State `protobuf:"varint,1,opt,name=state,enum=gnoi.optical.AdjustPSDProgress_State" json:"state,omitempty"`
}

func (m *AdjustPSDProgress) Reset()                    { *m = AdjustPSDProgress{} }
func (m *AdjustPSDProgress) String() string            { return proto.CompactTextString(m) }
func (*AdjustPSDProgress) ProtoMessage()               {}
func (*AdjustPSDProgress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AdjustPSDError struct {
	Type   AdjustPSDError_Type `protobuf:"varint,1,opt,name=type,enum=gnoi.optical.AdjustPSDError_Type" json:"type,omitempty"`
	Detail string              `protobuf:"bytes,2,opt,name=detail" json:"detail,omitempty"`
}

func (m *AdjustPSDError) Reset()                    { *m = AdjustPSDError{} }
func (m *AdjustPSDError) String() string            { return proto.CompactTextString(m) }
func (*AdjustPSDError) ProtoMessage()               {}
func (*AdjustPSDError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type AdjustPSDResponse struct {
	// Types that are valid to be assigned to Response:
	//	*AdjustPSDResponse_Progress
	//	*AdjustPSDResponse_Error
	Response isAdjustPSDResponse_Response `protobuf_oneof:"response"`
}

func (m *AdjustPSDResponse) Reset()                    { *m = AdjustPSDResponse{} }
func (m *AdjustPSDResponse) String() string            { return proto.CompactTextString(m) }
func (*AdjustPSDResponse) ProtoMessage()               {}
func (*AdjustPSDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isAdjustPSDResponse_Response interface {
	isAdjustPSDResponse_Response()
}

type AdjustPSDResponse_Progress struct {
	Progress *AdjustPSDProgress `protobuf:"bytes,1,opt,name=progress,oneof"`
}
type AdjustPSDResponse_Error struct {
	Error *AdjustPSDError `protobuf:"bytes,2,opt,name=error,oneof"`
}

func (*AdjustPSDResponse_Progress) isAdjustPSDResponse_Response() {}
func (*AdjustPSDResponse_Error) isAdjustPSDResponse_Response()    {}

func (m *AdjustPSDResponse) GetResponse() isAdjustPSDResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *AdjustPSDResponse) GetProgress() *AdjustPSDProgress {
	if x, ok := m.GetResponse().(*AdjustPSDResponse_Progress); ok {
		return x.Progress
	}
	return nil
}

func (m *AdjustPSDResponse) GetError() *AdjustPSDError {
	if x, ok := m.GetResponse().(*AdjustPSDResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AdjustPSDResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AdjustPSDResponse_OneofMarshaler, _AdjustPSDResponse_OneofUnmarshaler, _AdjustPSDResponse_OneofSizer, []interface{}{
		(*AdjustPSDResponse_Progress)(nil),
		(*AdjustPSDResponse_Error)(nil),
	}
}

func _AdjustPSDResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AdjustPSDResponse)
	// response
	switch x := m.Response.(type) {
	case *AdjustPSDResponse_Progress:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Progress); err != nil {
			return err
		}
	case *AdjustPSDResponse_Error:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AdjustPSDResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _AdjustPSDResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AdjustPSDResponse)
	switch tag {
	case 1: // response.progress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AdjustPSDProgress)
		err := b.DecodeMessage(msg)
		m.Response = &AdjustPSDResponse_Progress{msg}
		return true, err
	case 2: // response.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AdjustPSDError)
		err := b.DecodeMessage(msg)
		m.Response = &AdjustPSDResponse_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AdjustPSDResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AdjustPSDResponse)
	// response
	switch x := m.Response.(type) {
	case *AdjustPSDResponse_Progress:
		s := proto.Size(x.Progress)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdjustPSDResponse_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CancelAdjustPSDResponse struct {
}

func (m *CancelAdjustPSDResponse) Reset()                    { *m = CancelAdjustPSDResponse{} }
func (m *CancelAdjustPSDResponse) String() string            { return proto.CompactTextString(m) }
func (*CancelAdjustPSDResponse) ProtoMessage()               {}
func (*CancelAdjustPSDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*AdjustPSDRequest)(nil), "gnoi.optical.AdjustPSDRequest")
	proto.RegisterType((*AdjustPSDProgress)(nil), "gnoi.optical.AdjustPSDProgress")
	proto.RegisterType((*AdjustPSDError)(nil), "gnoi.optical.AdjustPSDError")
	proto.RegisterType((*AdjustPSDResponse)(nil), "gnoi.optical.AdjustPSDResponse")
	proto.RegisterType((*CancelAdjustPSDResponse)(nil), "gnoi.optical.CancelAdjustPSDResponse")
	proto.RegisterEnum("gnoi.optical.AdjustPSDRequest_SignalDirection", AdjustPSDRequest_SignalDirection_name, AdjustPSDRequest_SignalDirection_value)
	proto.RegisterEnum("gnoi.optical.AdjustPSDProgress_State", AdjustPSDProgress_State_name, AdjustPSDProgress_State_value)
	proto.RegisterEnum("gnoi.optical.AdjustPSDError_Type", AdjustPSDError_Type_name, AdjustPSDError_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for WavelengthRouter service

type WavelengthRouterClient interface {
	// AdjustPSD performs a power spectral density (PSD) adjustment on an optical
	// DWDM line system port.
	//
	// This RPC's initial message triggers adjustments. The target should validate
	// the request, and immediately begin the adjustment as long as another
	// adjustment is not already running. As this RPC may take multiple minutes,
	// the state should be regularly streamed to the client. The operation should
	// be completed on the device regardless of the state of the RPC channel to
	// the initiating client. A client that becomes disconnected during an
	// operation can reconnect, requesting the same operation, and receive status
	// updates this way. There is no means by which an adjustment that has been
	// triggered by a client can be cancelled unless the CancelAdjustPSD RPC is
	// used.
	AdjustPSD(ctx context.Context, in *AdjustPSDRequest, opts ...grpc.CallOption) (WavelengthRouter_AdjustPSDClient, error)
	// CancelAdjustPSD cancels an in-progress AdjustPSD request. If an
	// adjustment is not being performed for the provided request, then the RPC
	// should return successfully.
	CancelAdjustPSD(ctx context.Context, in *AdjustPSDRequest, opts ...grpc.CallOption) (*CancelAdjustPSDResponse, error)
}

type wavelengthRouterClient struct {
	cc *grpc.ClientConn
}

func NewWavelengthRouterClient(cc *grpc.ClientConn) WavelengthRouterClient {
	return &wavelengthRouterClient{cc}
}

func (c *wavelengthRouterClient) AdjustPSD(ctx context.Context, in *AdjustPSDRequest, opts ...grpc.CallOption) (WavelengthRouter_AdjustPSDClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WavelengthRouter_serviceDesc.Streams[0], c.cc, "/gnoi.optical.WavelengthRouter/AdjustPSD", opts...)
	if err != nil {
		return nil, err
	}
	x := &wavelengthRouterAdjustPSDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WavelengthRouter_AdjustPSDClient interface {
	Recv() (*AdjustPSDResponse, error)
	grpc.ClientStream
}

type wavelengthRouterAdjustPSDClient struct {
	grpc.ClientStream
}

func (x *wavelengthRouterAdjustPSDClient) Recv() (*AdjustPSDResponse, error) {
	m := new(AdjustPSDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wavelengthRouterClient) CancelAdjustPSD(ctx context.Context, in *AdjustPSDRequest, opts ...grpc.CallOption) (*CancelAdjustPSDResponse, error) {
	out := new(CancelAdjustPSDResponse)
	err := grpc.Invoke(ctx, "/gnoi.optical.WavelengthRouter/CancelAdjustPSD", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WavelengthRouter service

type WavelengthRouterServer interface {
	// AdjustPSD performs a power spectral density (PSD) adjustment on an optical
	// DWDM line system port.
	//
	// This RPC's initial message triggers adjustments. The target should validate
	// the request, and immediately begin the adjustment as long as another
	// adjustment is not already running. As this RPC may take multiple minutes,
	// the state should be regularly streamed to the client. The operation should
	// be completed on the device regardless of the state of the RPC channel to
	// the initiating client. A client that becomes disconnected during an
	// operation can reconnect, requesting the same operation, and receive status
	// updates this way. There is no means by which an adjustment that has been
	// triggered by a client can be cancelled unless the CancelAdjustPSD RPC is
	// used.
	AdjustPSD(*AdjustPSDRequest, WavelengthRouter_AdjustPSDServer) error
	// CancelAdjustPSD cancels an in-progress AdjustPSD request. If an
	// adjustment is not being performed for the provided request, then the RPC
	// should return successfully.
	CancelAdjustPSD(context.Context, *AdjustPSDRequest) (*CancelAdjustPSDResponse, error)
}

func RegisterWavelengthRouterServer(s *grpc.Server, srv WavelengthRouterServer) {
	s.RegisterService(&_WavelengthRouter_serviceDesc, srv)
}

func _WavelengthRouter_AdjustPSD_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AdjustPSDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WavelengthRouterServer).AdjustPSD(m, &wavelengthRouterAdjustPSDServer{stream})
}

type WavelengthRouter_AdjustPSDServer interface {
	Send(*AdjustPSDResponse) error
	grpc.ServerStream
}

type wavelengthRouterAdjustPSDServer struct {
	grpc.ServerStream
}

func (x *wavelengthRouterAdjustPSDServer) Send(m *AdjustPSDResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WavelengthRouter_CancelAdjustPSD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustPSDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WavelengthRouterServer).CancelAdjustPSD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.optical.WavelengthRouter/CancelAdjustPSD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WavelengthRouterServer).CancelAdjustPSD(ctx, req.(*AdjustPSDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WavelengthRouter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.optical.WavelengthRouter",
	HandlerType: (*WavelengthRouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelAdjustPSD",
			Handler:    _WavelengthRouter_CancelAdjustPSD_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AdjustPSD",
			Handler:       _WavelengthRouter_AdjustPSD_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("wavelength_router/wavelength_router.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x93, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xed, 0xa8, 0x69, 0x93, 0x49, 0x49, 0xdc, 0xe5, 0x54, 0x2a, 0x44, 0x8b, 0x25, 0xa4,
	0x22, 0xa1, 0x4d, 0x08, 0x70, 0xc5, 0x41, 0xca, 0xc1, 0x25, 0x16, 0xc1, 0xb1, 0xd6, 0xb6, 0x22,
	0xb8, 0x89, 0x5c, 0x67, 0x71, 0x8c, 0xd2, 0x5d, 0xb3, 0xde, 0x80, 0x7a, 0xc9, 0x3b, 0x70, 0xcb,
	0xbb, 0xf0, 0x0c, 0xbc, 0x03, 0xef, 0x81, 0x7c, 0x68, 0x52, 0xa5, 0x4a, 0x7b, 0x63, 0xc9, 0xb3,
	0xff, 0xcc, 0x7c, 0xf3, 0x6b, 0x06, 0x9e, 0xfe, 0xf0, 0xbf, 0xd3, 0x39, 0x65, 0xa1, 0x9c, 0x4d,
	0x04, 0x5f, 0x48, 0x2a, 0x9a, 0x57, 0x22, 0x38, 0x16, 0x5c, 0x72, 0xb4, 0x1b, 0x32, 0x1e, 0x61,
	0x1e, 0xcb, 0x28, 0xf0, 0xe7, 0x07, 0xcf, 0xc2, 0x48, 0xce, 0x16, 0xa7, 0x38, 0xe0, 0x67, 0x4d,
	0x1e, 0x53, 0x16, 0x70, 0xf6, 0x25, 0x0a, 0x9b, 0xa9, 0xa6, 0x29, 0xcf, 0x63, 0x9a, 0xe4, 0xdf,
	0x3c, 0x57, 0xff, 0xa7, 0x82, 0xd6, 0x99, 0x7e, 0x5d, 0x24, 0xd2, 0x76, 0xfa, 0x84, 0x7e, 0x5b,
	0xd0, 0x44, 0x22, 0x0c, 0xd5, 0x80, 0x9f, 0xc5, 0x9c, 0x51, 0x26, 0xf7, 0xd5, 0x23, 0xf5, 0xb8,
	0xd6, 0xd6, 0x70, 0xd6, 0x24, 0x4f, 0xb5, 0x7d, 0x39, 0x23, 0x2b, 0x09, 0x1a, 0x42, 0x75, 0x1a,
	0x09, 0x1a, 0xc8, 0x88, 0xb3, 0xfd, 0xd2, 0x91, 0x7a, 0x5c, 0x6f, 0x63, 0x7c, 0x19, 0x0a, 0xaf,
	0xb7, 0xc0, 0x4e, 0x14, 0x32, 0x7f, 0xde, 0xbf, 0xc8, 0x22, 0xab, 0x02, 0xba, 0x03, 0x8d, 0xb5,
	0x57, 0x74, 0x17, 0xf6, 0xfa, 0x26, 0x31, 0x7a, 0xae, 0x39, 0xb2, 0x26, 0x9e, 0xf5, 0xc1, 0x1a,
	0x8d, 0x2d, 0x4d, 0x41, 0xb7, 0xa1, 0xb1, 0x0a, 0x9b, 0x96, 0xed, 0xb9, 0x9a, 0x8a, 0xee, 0x80,
	0xb6, 0x0a, 0x8e, 0x3c, 0x37, 0x8d, 0x96, 0xf4, 0x9f, 0x2a, 0xec, 0x2d, 0x21, 0x6c, 0xc1, 0x43,
	0x41, 0x93, 0x04, 0xbd, 0x86, 0x72, 0x22, 0x7d, 0x49, 0xb3, 0x21, 0xeb, 0xed, 0x27, 0x1b, 0xa0,
	0x2f, 0xf4, 0xd8, 0x49, 0xc5, 0x24, 0xcf, 0xd1, 0x9b, 0x50, 0xce, 0xfe, 0x51, 0x0d, 0x76, 0x56,
	0x4c, 0x35, 0xd8, 0x21, 0x9e, 0x65, 0x99, 0xd6, 0x7b, 0x4d, 0x45, 0xbb, 0x50, 0xe9, 0x8d, 0x3e,
	0xda, 0x43, 0xc3, 0x35, 0xb4, 0x92, 0xfe, 0x5b, 0x85, 0xfa, 0xb2, 0xa6, 0x21, 0x04, 0x17, 0xe8,
	0x15, 0x6c, 0xa5, 0x96, 0x16, 0xfd, 0x1f, 0x6f, 0xe8, 0x9f, 0x69, 0xb1, 0x7b, 0x1e, 0x53, 0x92,
	0xc9, 0xd1, 0x3d, 0xd8, 0x9e, 0x52, 0xe9, 0x47, 0xf3, 0xcc, 0xed, 0x2a, 0x29, 0xfe, 0xf4, 0x37,
	0xb0, 0x95, 0xaa, 0x50, 0x03, 0x6a, 0x9e, 0xe5, 0xd8, 0x46, 0xcf, 0x3c, 0x31, 0x8d, 0xbe, 0xa6,
	0xa0, 0x5b, 0x50, 0xb5, 0x47, 0xc4, 0x9d, 0x74, 0x3d, 0xe7, 0x53, 0xee, 0xd1, 0xa0, 0x43, 0xfa,
	0xe3, 0x0e, 0x31, 0x26, 0x27, 0x1d, 0x73, 0xe8, 0x91, 0x94, 0xef, 0xd7, 0x65, 0x8f, 0x08, 0x4d,
	0x62, 0xce, 0x12, 0x8a, 0xde, 0x42, 0x25, 0x2e, 0xe6, 0x2f, 0x76, 0xe1, 0xf0, 0x06, 0x9b, 0x06,
	0x0a, 0x59, 0xa6, 0xa0, 0x97, 0x50, 0xa6, 0x29, 0x7e, 0x46, 0x5a, 0x6b, 0x3f, 0xbc, 0x6e, 0xc4,
	0x81, 0x42, 0x72, 0x71, 0x17, 0xa0, 0x22, 0x0a, 0x00, 0xfd, 0x01, 0xdc, 0xef, 0xf9, 0x2c, 0xa0,
	0xf3, 0x2b, 0x6c, 0xed, 0x3f, 0x2a, 0x68, 0xe3, 0xe5, 0x55, 0x90, 0xec, 0x28, 0x90, 0x0d, 0xd5,
	0xa5, 0x12, 0x3d, 0xba, 0x7e, 0x0f, 0x0f, 0x0e, 0x37, 0xbe, 0x17, 0xdd, 0x95, 0x96, 0x8a, 0x3e,
	0x43, 0x63, 0x8d, 0xe0, 0xc6, 0xba, 0x6b, 0xab, 0xb4, 0x61, 0x00, 0x5d, 0xe9, 0x56, 0xfe, 0xbe,
	0x2b, 0xb7, 0xf0, 0x73, 0xdc, 0x3a, 0xdd, 0xce, 0x2e, 0xf2, 0xc5, 0xff, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xa0, 0xb1, 0x54, 0x93, 0xfa, 0x03, 0x00, 0x00,
}
