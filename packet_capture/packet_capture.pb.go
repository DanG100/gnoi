// Code generated by protoc-gen-go. DO NOT EDIT
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.3
// source: packet_capture/packet_capture.proto

package pcap

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OperatingBand int32

const (
	OperatingBand_BAND_2G  OperatingBand = 0
	OperatingBand_BAND_5G  OperatingBand = 1
	OperatingBand_BAND_6G  OperatingBand = 2
	OperatingBand_BAND_ALL OperatingBand = 3
)

// Enum value maps for OperatingBand.
var (
	OperatingBand_name = map[int32]string{
		0: "BAND_2G",
		1: "BAND_5G",
		2: "BAND_6G",
		3: "BAND_ALL",
	}
	OperatingBand_value = map[string]int32{
		"BAND_2G":  0,
		"BAND_5G":  1,
		"BAND_6G":  2,
		"BAND_ALL": 3,
	}
)

func (x OperatingBand) Enum() *OperatingBand {
	p := new(OperatingBand)
	*p = x
	return p
}

func (x OperatingBand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatingBand) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_capture_packet_capture_proto_enumTypes[0].Descriptor()
}

func (OperatingBand) Type() protoreflect.EnumType {
	return &file_packet_capture_packet_capture_proto_enumTypes[0]
}

func (x OperatingBand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatingBand.Descriptor instead.
func (OperatingBand) EnumDescriptor() ([]byte, []int) {
	return file_packet_capture_packet_capture_proto_rawDescGZIP(), []int{0}
}

type Protocol int32

const (
	Protocol_TCP Protocol = 0
	Protocol_UDP Protocol = 1
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0: "TCP",
		1: "UDP",
	}
	Protocol_value = map[string]int32{
		"TCP": 0,
		"UDP": 1,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_capture_packet_capture_proto_enumTypes[1].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_packet_capture_packet_capture_proto_enumTypes[1]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_packet_capture_packet_capture_proto_rawDescGZIP(), []int{1}
}

type Direction int32

const (
	// When applied to an interface, the Direction of packets to capture, receive
	// transmit, or both.
	Direction_RX   Direction = 0
	Direction_TX   Direction = 1
	Direction_BOTH Direction = 2
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "RX",
		1: "TX",
		2: "BOTH",
	}
	Direction_value = map[string]int32{
		"RX":   0,
		"TX":   1,
		"BOTH": 2,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_capture_packet_capture_proto_enumTypes[2].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_packet_capture_packet_capture_proto_enumTypes[2]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_packet_capture_packet_capture_proto_rawDescGZIP(), []int{2}
}

type AccessCaptureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operating band: 2.4G, 5G, 6G
	OperatingBand []OperatingBand `protobuf:"varint,1,rep,packed,name=operating_band,json=operatingBand,proto3,enum=gnoi.pcap.OperatingBand" json:"operating_band,omitempty"`
	// Types that are assignable to FilterType:
	//	*AccessCaptureType_Ssid
	//	*AccessCaptureType_Mac
	FilterType isAccessCaptureType_FilterType `protobuf_oneof:"filter_type"`
	// Capture packets in promiscuous mode
	PromiscuousMode bool `protobuf:"varint,4,opt,name=promiscuous_mode,json=promiscuousMode,proto3" json:"promiscuous_mode,omitempty"`
}

func (x *AccessCaptureType) Reset() {
	*x = AccessCaptureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_capture_packet_capture_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessCaptureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessCaptureType) ProtoMessage() {}

func (x *AccessCaptureType) ProtoReflect() protoreflect.Message {
	mi := &file_packet_capture_packet_capture_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessCaptureType.ProtoReflect.Descriptor instead.
func (*AccessCaptureType) Descriptor() ([]byte, []int) {
	return file_packet_capture_packet_capture_proto_rawDescGZIP(), []int{0}
}

func (x *AccessCaptureType) GetOperatingBand() []OperatingBand {
	if x != nil {
		return x.OperatingBand
	}
	return nil
}

func (m *AccessCaptureType) GetFilterType() isAccessCaptureType_FilterType {
	if m != nil {
		return m.FilterType
	}
	return nil
}

func (x *AccessCaptureType) GetSsid() string {
	if x, ok := x.GetFilterType().(*AccessCaptureType_Ssid); ok {
		return x.Ssid
	}
	return ""
}

func (x *AccessCaptureType) GetMac() string {
	if x, ok := x.GetFilterType().(*AccessCaptureType_Mac); ok {
		return x.Mac
	}
	return ""
}

func (x *AccessCaptureType) GetPromiscuousMode() bool {
	if x != nil {
		return x.PromiscuousMode
	}
	return false
}

type isAccessCaptureType_FilterType interface {
	isAccessCaptureType_FilterType()
}

type AccessCaptureType_Ssid struct {
	// Optional, SSID of a VAP
	Ssid string `protobuf:"bytes,2,opt,name=ssid,proto3,oneof"`
}

type AccessCaptureType_Mac struct {
	// Optional, MAC addresss matching a BSSID or a client MAC
	Mac string `protobuf:"bytes,3,opt,name=mac,proto3,oneof"`
}

func (*AccessCaptureType_Ssid) isAccessCaptureType_FilterType() {}

func (*AccessCaptureType_Mac) isAccessCaptureType_FilterType() {}

type ScanCaptureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Combo []*BandChannelCombo `protobuf:"bytes,1,rep,name=combo,proto3" json:"combo,omitempty"`
}

func (x *ScanCaptureType) Reset() {
	*x = ScanCaptureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_capture_packet_capture_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanCaptureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanCaptureType) ProtoMessage() {}

func (x *ScanCaptureType) ProtoReflect() protoreflect.Message {
	mi := &file_packet_capture_packet_capture_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanCaptureType.ProtoReflect.Descriptor instead.
func (*ScanCaptureType) Descriptor() ([]byte, []int) {
	return file_packet_capture_packet_capture_proto_rawDescGZIP(), []int{1}
}

func (x *ScanCaptureType) GetCombo() []*BandChannelCombo {
	if x != nil {
		return x.Combo
	}
	return nil
}

type BandChannelCombo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operating band: 2.4G, 5G, 6G
	OperatingBand OperatingBand `protobuf:"varint,1,opt,name=operating_band,json=operatingBand,proto3,enum=gnoi.pcap.OperatingBand" json:"operating_band,omitempty"`
	// Channels
	Channel []string `protobuf:"bytes,2,rep,name=channel,proto3" json:"channel,omitempty"`
}

func (x *BandChannelCombo) Reset() {
	*x = BandChannelCombo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_capture_packet_capture_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BandChannelCombo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BandChannelCombo) ProtoMessage() {}

func (x *BandChannelCombo) ProtoReflect() protoreflect.Message {
	mi := &file_packet_capture_packet_capture_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BandChannelCombo.ProtoReflect.Descriptor instead.
func (*BandChannelCombo) Descriptor() ([]byte, []int) {
	return file_packet_capture_packet_capture_proto_rawDescGZIP(), []int{2}
}

func (x *BandChannelCombo) GetOperatingBand() OperatingBand {
	if x != nil {
		return x.OperatingBand
	}
	return OperatingBand_BAND_2G
}

func (x *BandChannelCombo) GetChannel() []string {
	if x != nil {
		return x.Channel
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filter_name can be a reference to a filter already configured on the device
	// such as an ACL/class-map or other platform-specific abstraction that
	// may allow for the configuration of other filtering not otherwise available.
	FilterName string `protobuf:"bytes,1,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"`
	// Source/destination net may be used to match traffic and should be specified
	// using CIDR notation.  eg. 1.1.1.1/32
	SrcNet   string     `protobuf:"bytes,2,opt,name=src_net,json=srcNet,proto3" json:"src_net,omitempty"`
	DestNet  string     `protobuf:"bytes,3,opt,name=dest_net,json=destNet,proto3" json:"dest_net,omitempty"`
	Protocol []Protocol `protobuf:"varint,4,rep,packed,name=protocol,proto3,enum=gnoi.pcap.Protocol" json:"protocol,omitempty"`
	Port     []uint32   `protobuf:"varint,5,rep,packed,name=port,proto3" json:"port,omitempty"`
	Vlan     []uint32   `protobuf:"varint,6,rep,packed,name=vlan,proto3" json:"vlan,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_capture_packet_capture_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_packet_capture_packet_capture_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_packet_capture_packet_capture_proto_rawDescGZIP(), []int{3}
}

func (x *Filter) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

func (x *Filter) GetSrcNet() string {
	if x != nil {
		return x.SrcNet
	}
	return ""
}

func (x *Filter) GetDestNet() string {
	if x != nil {
		return x.DestNet
	}
	return ""
}

func (x *Filter) GetProtocol() []Protocol {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *Filter) GetPort() []uint32 {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *Filter) GetVlan() []uint32 {
	if x != nil {
		return x.Vlan
	}
	return nil
}

type WiredRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface name
	Ifname string `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	// The Direction to capture from, if not specified defaults to BOTH.
	Direction Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=gnoi.pcap.Direction" json:"direction,omitempty"`
	// Filtering based on protocols.
	//
	// Types that are assignable to FilterType:
	//	*WiredRequest_TcpdumpExpression
	//	*WiredRequest_Filter
	FilterType isWiredRequest_FilterType `protobuf_oneof:"filter_type"`
}

func (x *WiredRequest) Reset() {
	*x = WiredRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_capture_packet_capture_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WiredRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WiredRequest) ProtoMessage() {}

func (x *WiredRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packet_capture_packet_capture_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WiredRequest.ProtoReflect.Descriptor instead.
func (*WiredRequest) Descriptor() ([]byte, []int) {
	return file_packet_capture_packet_capture_proto_rawDescGZIP(), []int{4}
}

func (x *WiredRequest) GetIfname() string {
	if x != nil {
		return x.Ifname
	}
	return ""
}

func (x *WiredRequest) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_RX
}

func (m *WiredRequest) GetFilterType() isWiredRequest_FilterType {
	if m != nil {
		return m.FilterType
	}
	return nil
}

func (x *WiredRequest) GetTcpdumpExpression() string {
	if x, ok := x.GetFilterType().(*WiredRequest_TcpdumpExpression); ok {
		return x.TcpdumpExpression
	}
	return ""
}

func (x *WiredRequest) GetFilter() *Filter {
	if x, ok := x.GetFilterType().(*WiredRequest_Filter); ok {
		return x.Filter
	}
	return nil
}

type isWiredRequest_FilterType interface {
	isWiredRequest_FilterType()
}

type WiredRequest_TcpdumpExpression struct {
	TcpdumpExpression string `protobuf:"bytes,3,opt,name=tcpdump_expression,json=tcpdumpExpression,proto3,oneof"`
}

type WiredRequest_Filter struct {
	Filter *Filter `protobuf:"bytes,4,opt,name=filter,proto3,oneof"`
}

func (*WiredRequest_TcpdumpExpression) isWiredRequest_FilterType() {}

func (*WiredRequest_Filter) isWiredRequest_FilterType() {}

type WirelessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CaptureType:
	//	*WirelessRequest_AccessType
	//	*WirelessRequest_ScanType
	CaptureType isWirelessRequest_CaptureType `protobuf_oneof:"capture_type"`
}

func (x *WirelessRequest) Reset() {
	*x = WirelessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_capture_packet_capture_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirelessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirelessRequest) ProtoMessage() {}

func (x *WirelessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packet_capture_packet_capture_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirelessRequest.ProtoReflect.Descriptor instead.
func (*WirelessRequest) Descriptor() ([]byte, []int) {
	return file_packet_capture_packet_capture_proto_rawDescGZIP(), []int{5}
}

func (m *WirelessRequest) GetCaptureType() isWirelessRequest_CaptureType {
	if m != nil {
		return m.CaptureType
	}
	return nil
}

func (x *WirelessRequest) GetAccessType() *AccessCaptureType {
	if x, ok := x.GetCaptureType().(*WirelessRequest_AccessType); ok {
		return x.AccessType
	}
	return nil
}

func (x *WirelessRequest) GetScanType() *ScanCaptureType {
	if x, ok := x.GetCaptureType().(*WirelessRequest_ScanType); ok {
		return x.ScanType
	}
	return nil
}

type isWirelessRequest_CaptureType interface {
	isWirelessRequest_CaptureType()
}

type WirelessRequest_AccessType struct {
	// Access radio
	AccessType *AccessCaptureType `protobuf:"bytes,1,opt,name=access_type,json=accessType,proto3,oneof"`
}

type WirelessRequest_ScanType struct {
	// Scan radio
	ScanType *ScanCaptureType `protobuf:"bytes,2,opt,name=scan_type,json=scanType,proto3,oneof"`
}

func (*WirelessRequest_AccessType) isWirelessRequest_CaptureType() {}

func (*WirelessRequest_ScanType) isWirelessRequest_CaptureType() {}

type PcapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RequestType:
	//	*PcapRequest_WiredRequest
	//	*PcapRequest_WirelessRequest
	RequestType isPcapRequest_RequestType `protobuf_oneof:"request_type"`
	// To trim the data during packet capture: 0 for entire packet
	TrimPayload uint32 `protobuf:"varint,3,opt,name=trim_payload,json=trimPayload,proto3" json:"trim_payload,omitempty"`
	// The number of pakets to capture, after which the capture will end; 0 for
	// for unlimited.
	PacketCount uint32 `protobuf:"varint,4,opt,name=packet_count,json=packetCount,proto3" json:"packet_count,omitempty"`
	// Capture duration in nanosec; 0 for indefinite
	Duration uint64 `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *PcapRequest) Reset() {
	*x = PcapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_capture_packet_capture_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PcapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcapRequest) ProtoMessage() {}

func (x *PcapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packet_capture_packet_capture_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcapRequest.ProtoReflect.Descriptor instead.
func (*PcapRequest) Descriptor() ([]byte, []int) {
	return file_packet_capture_packet_capture_proto_rawDescGZIP(), []int{6}
}

func (m *PcapRequest) GetRequestType() isPcapRequest_RequestType {
	if m != nil {
		return m.RequestType
	}
	return nil
}

func (x *PcapRequest) GetWiredRequest() *WiredRequest {
	if x, ok := x.GetRequestType().(*PcapRequest_WiredRequest); ok {
		return x.WiredRequest
	}
	return nil
}

func (x *PcapRequest) GetWirelessRequest() *WirelessRequest {
	if x, ok := x.GetRequestType().(*PcapRequest_WirelessRequest); ok {
		return x.WirelessRequest
	}
	return nil
}

func (x *PcapRequest) GetTrimPayload() uint32 {
	if x != nil {
		return x.TrimPayload
	}
	return 0
}

func (x *PcapRequest) GetPacketCount() uint32 {
	if x != nil {
		return x.PacketCount
	}
	return 0
}

func (x *PcapRequest) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type isPcapRequest_RequestType interface {
	isPcapRequest_RequestType()
}

type PcapRequest_WiredRequest struct {
	// Wired capture request
	WiredRequest *WiredRequest `protobuf:"bytes,1,opt,name=wired_request,json=wiredRequest,proto3,oneof"`
}

type PcapRequest_WirelessRequest struct {
	// Wireless capture request
	WirelessRequest *WirelessRequest `protobuf:"bytes,2,opt,name=wireless_request,json=wirelessRequest,proto3,oneof"`
}

func (*PcapRequest_WiredRequest) isPcapRequest_RequestType() {}

func (*PcapRequest_WirelessRequest) isPcapRequest_RequestType() {}

type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Packets
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_capture_packet_capture_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_packet_capture_packet_capture_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_packet_capture_packet_capture_proto_rawDescGZIP(), []int{7}
}

func (x *Packet) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PcapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packets []*Packet `protobuf:"bytes,1,rep,name=packets,proto3" json:"packets,omitempty"`
}

func (x *PcapResponse) Reset() {
	*x = PcapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_capture_packet_capture_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PcapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcapResponse) ProtoMessage() {}

func (x *PcapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packet_capture_packet_capture_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcapResponse.ProtoReflect.Descriptor instead.
func (*PcapResponse) Descriptor() ([]byte, []int) {
	return file_packet_capture_packet_capture_proto_rawDescGZIP(), []int{8}
}

func (x *PcapResponse) GetPackets() []*Packet {
	if x != nil {
		return x.Packets
	}
	return nil
}

var File_packet_capture_packet_capture_proto protoreflect.FileDescriptor

var file_packet_capture_packet_capture_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x63, 0x61, 0x70,
	0x22, 0xb8, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x64, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61,
	0x63, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x63, 0x75, 0x6f, 0x75, 0x73,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x6d, 0x69, 0x73, 0x63, 0x75, 0x6f, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x44, 0x0a, 0x0f, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31,
	0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x62,
	0x6f, 0x22, 0x6d, 0x0a, 0x10, 0x42, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x12, 0x3f, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x64, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x22, 0xb6, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x72, 0x63, 0x5f, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x72, 0x63, 0x4e, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x74,
	0x12, 0x2f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x22, 0xc7, 0x01, 0x0a, 0x0c, 0x57, 0x69,
	0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x66,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x66, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x63, 0x61,
	0x70, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x64, 0x75, 0x6d,
	0x70, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x74, 0x63, 0x70, 0x64, 0x75, 0x6d, 0x70, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70,
	0x63, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0f, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6e,
	0x6f, 0x69, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x0b, 0x50, 0x63, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x77, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x77, 0x69, 0x72,
	0x65, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x72, 0x69, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x1c,
	0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x0c,
	0x50, 0x63, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2a, 0x44, 0x0a, 0x0d, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41,
	0x4e, 0x44, 0x5f, 0x32, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x4e, 0x44, 0x5f,
	0x35, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x36, 0x47, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x2a,
	0x1c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x54,
	0x43, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x01, 0x2a, 0x25, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x58,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x58, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f,
	0x54, 0x48, 0x10, 0x02, 0x32, 0x4c, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x50, 0x63, 0x61, 0x70, 0x12, 0x16, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x50, 0x63, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x63, 0x61,
	0x70, 0x2e, 0x50, 0x63, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x69,
	0x2f, 0x70, 0x63, 0x61, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_packet_capture_packet_capture_proto_rawDescOnce sync.Once
	file_packet_capture_packet_capture_proto_rawDescData = file_packet_capture_packet_capture_proto_rawDesc
)

func file_packet_capture_packet_capture_proto_rawDescGZIP() []byte {
	file_packet_capture_packet_capture_proto_rawDescOnce.Do(func() {
		file_packet_capture_packet_capture_proto_rawDescData = protoimpl.X.CompressGZIP(file_packet_capture_packet_capture_proto_rawDescData)
	})
	return file_packet_capture_packet_capture_proto_rawDescData
}

var file_packet_capture_packet_capture_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_packet_capture_packet_capture_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_packet_capture_packet_capture_proto_goTypes = []interface{}{
	(OperatingBand)(0),        // 0: gnoi.pcap.OperatingBand
	(Protocol)(0),             // 1: gnoi.pcap.Protocol
	(Direction)(0),            // 2: gnoi.pcap.Direction
	(*AccessCaptureType)(nil), // 3: gnoi.pcap.AccessCaptureType
	(*ScanCaptureType)(nil),   // 4: gnoi.pcap.ScanCaptureType
	(*BandChannelCombo)(nil),  // 5: gnoi.pcap.BandChannelCombo
	(*Filter)(nil),            // 6: gnoi.pcap.Filter
	(*WiredRequest)(nil),      // 7: gnoi.pcap.WiredRequest
	(*WirelessRequest)(nil),   // 8: gnoi.pcap.WirelessRequest
	(*PcapRequest)(nil),       // 9: gnoi.pcap.PcapRequest
	(*Packet)(nil),            // 10: gnoi.pcap.Packet
	(*PcapResponse)(nil),      // 11: gnoi.pcap.PcapResponse
}
var file_packet_capture_packet_capture_proto_depIdxs = []int32{
	0,  // 0: gnoi.pcap.AccessCaptureType.operating_band:type_name -> gnoi.pcap.OperatingBand
	5,  // 1: gnoi.pcap.ScanCaptureType.combo:type_name -> gnoi.pcap.BandChannelCombo
	0,  // 2: gnoi.pcap.BandChannelCombo.operating_band:type_name -> gnoi.pcap.OperatingBand
	1,  // 3: gnoi.pcap.Filter.protocol:type_name -> gnoi.pcap.Protocol
	2,  // 4: gnoi.pcap.WiredRequest.direction:type_name -> gnoi.pcap.Direction
	6,  // 5: gnoi.pcap.WiredRequest.filter:type_name -> gnoi.pcap.Filter
	3,  // 6: gnoi.pcap.WirelessRequest.access_type:type_name -> gnoi.pcap.AccessCaptureType
	4,  // 7: gnoi.pcap.WirelessRequest.scan_type:type_name -> gnoi.pcap.ScanCaptureType
	7,  // 8: gnoi.pcap.PcapRequest.wired_request:type_name -> gnoi.pcap.WiredRequest
	8,  // 9: gnoi.pcap.PcapRequest.wireless_request:type_name -> gnoi.pcap.WirelessRequest
	10, // 10: gnoi.pcap.PcapResponse.packets:type_name -> gnoi.pcap.Packet
	9,  // 11: gnoi.pcap.PacketCapture.Pcap:input_type -> gnoi.pcap.PcapRequest
	11, // 12: gnoi.pcap.PacketCapture.Pcap:output_type -> gnoi.pcap.PcapResponse
	12, // [12:13] is the sub-list for method output_type
	11, // [11:12] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_packet_capture_packet_capture_proto_init() }
func file_packet_capture_packet_capture_proto_init() {
	if File_packet_capture_packet_capture_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_packet_capture_packet_capture_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessCaptureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_capture_packet_capture_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanCaptureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_capture_packet_capture_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BandChannelCombo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_capture_packet_capture_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_capture_packet_capture_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WiredRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_capture_packet_capture_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WirelessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_capture_packet_capture_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PcapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_capture_packet_capture_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_capture_packet_capture_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PcapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_packet_capture_packet_capture_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AccessCaptureType_Ssid)(nil),
		(*AccessCaptureType_Mac)(nil),
	}
	file_packet_capture_packet_capture_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*WiredRequest_TcpdumpExpression)(nil),
		(*WiredRequest_Filter)(nil),
	}
	file_packet_capture_packet_capture_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*WirelessRequest_AccessType)(nil),
		(*WirelessRequest_ScanType)(nil),
	}
	file_packet_capture_packet_capture_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*PcapRequest_WiredRequest)(nil),
		(*PcapRequest_WirelessRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_packet_capture_packet_capture_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_packet_capture_packet_capture_proto_goTypes,
		DependencyIndexes: file_packet_capture_packet_capture_proto_depIdxs,
		EnumInfos:         file_packet_capture_packet_capture_proto_enumTypes,
		MessageInfos:      file_packet_capture_packet_capture_proto_msgTypes,
	}.Build()
	File_packet_capture_packet_capture_proto = out.File
	file_packet_capture_packet_capture_proto_rawDesc = nil
	file_packet_capture_packet_capture_proto_goTypes = nil
	file_packet_capture_packet_capture_proto_depIdxs = nil
}
