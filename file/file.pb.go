// Code generated by protoc-gen-go. DO NOT EDIT.
// source: file/file.proto

/*
Package gnoi_file is a generated protocol buffer package.

It is generated from these files:
	file/file.proto

It has these top-level messages:
	PutRequest
	PutResponse
	GetRequest
	GetResponse
	StatRequest
	StatResponse
	StatInfo
	RemoveRequest
	RemoveResponse
*/
package gnoi_file

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import gnoi "github.com/openconfig/gnoi"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A PutRequest is used to send data to be written on a file on the target.
//
// The initial message contains an Open message. The Open message contains
// information name of the file and the file's permisssions.
//
// The remote_file must be an absolute path. If remote_file already exists on
// the target, it is overwritten, otherwise it is created. If the path to
// remote_file doesn't exist it will be created.
//
// The contents to be written are streamed through multiple messages using the
// contents field. Each message may contain up to 64KB of data.
//
// The final message of the RPC contains the hash of the file contents.
type PutRequest struct {
	// Types that are valid to be assigned to Request:
	//	*PutRequest_Open
	//	*PutRequest_Contents
	//	*PutRequest_Hash
	Request isPutRequest_Request `protobuf_oneof:"request"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isPutRequest_Request interface {
	isPutRequest_Request()
}

type PutRequest_Open struct {
	Open *PutRequest_Details `protobuf:"bytes,1,opt,name=open,oneof"`
}
type PutRequest_Contents struct {
	Contents []byte `protobuf:"bytes,2,opt,name=contents,proto3,oneof"`
}
type PutRequest_Hash struct {
	Hash *gnoi.HashType `protobuf:"bytes,3,opt,name=hash,oneof"`
}

func (*PutRequest_Open) isPutRequest_Request()     {}
func (*PutRequest_Contents) isPutRequest_Request() {}
func (*PutRequest_Hash) isPutRequest_Request()     {}

func (m *PutRequest) GetRequest() isPutRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *PutRequest) GetOpen() *PutRequest_Details {
	if x, ok := m.GetRequest().(*PutRequest_Open); ok {
		return x.Open
	}
	return nil
}

func (m *PutRequest) GetContents() []byte {
	if x, ok := m.GetRequest().(*PutRequest_Contents); ok {
		return x.Contents
	}
	return nil
}

func (m *PutRequest) GetHash() *gnoi.HashType {
	if x, ok := m.GetRequest().(*PutRequest_Hash); ok {
		return x.Hash
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PutRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PutRequest_OneofMarshaler, _PutRequest_OneofUnmarshaler, _PutRequest_OneofSizer, []interface{}{
		(*PutRequest_Open)(nil),
		(*PutRequest_Contents)(nil),
		(*PutRequest_Hash)(nil),
	}
}

func _PutRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PutRequest)
	// request
	switch x := m.Request.(type) {
	case *PutRequest_Open:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Open); err != nil {
			return err
		}
	case *PutRequest_Contents:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Contents)
	case *PutRequest_Hash:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hash); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PutRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _PutRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PutRequest)
	switch tag {
	case 1: // request.open
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PutRequest_Details)
		err := b.DecodeMessage(msg)
		m.Request = &PutRequest_Open{msg}
		return true, err
	case 2: // request.contents
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Request = &PutRequest_Contents{x}
		return true, err
	case 3: // request.hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gnoi.HashType)
		err := b.DecodeMessage(msg)
		m.Request = &PutRequest_Hash{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PutRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PutRequest)
	// request
	switch x := m.Request.(type) {
	case *PutRequest_Open:
		s := proto.Size(x.Open)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PutRequest_Contents:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Contents)))
		n += len(x.Contents)
	case *PutRequest_Hash:
		s := proto.Size(x.Hash)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PutRequest_Details struct {
	RemoteFile string `protobuf:"bytes,1,opt,name=remote_file,json=remoteFile" json:"remote_file,omitempty"`
	// Permissions are represented as the octal format of standard UNIX
	// file permissions.
	// ex. 775: user read/write/execute, group read/write/execute,
	// global read/execute.
	Permissions uint32 `protobuf:"varint,2,opt,name=permissions" json:"permissions,omitempty"`
}

func (m *PutRequest_Details) Reset()                    { *m = PutRequest_Details{} }
func (m *PutRequest_Details) String() string            { return proto.CompactTextString(m) }
func (*PutRequest_Details) ProtoMessage()               {}
func (*PutRequest_Details) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *PutRequest_Details) GetRemoteFile() string {
	if m != nil {
		return m.RemoteFile
	}
	return ""
}

func (m *PutRequest_Details) GetPermissions() uint32 {
	if m != nil {
		return m.Permissions
	}
	return 0
}

type PutResponse struct {
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// A GetRequest specifies the remote_file to be streamed back
// to the caller. The remote_file must be an absolute path to an
// existing file.
type GetRequest struct {
	RemoteFile string `protobuf:"bytes,1,opt,name=remote_file,json=remoteFile" json:"remote_file,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetRequest) GetRemoteFile() string {
	if m != nil {
		return m.RemoteFile
	}
	return ""
}

// A GetResponse either contains the next set of bytes read from the
// file or, as the last message, the hash of the data.
type GetResponse struct {
	// Types that are valid to be assigned to Response:
	//	*GetResponse_Contents
	//	*GetResponse_Hash
	Response isGetResponse_Response `protobuf_oneof:"response"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isGetResponse_Response interface {
	isGetResponse_Response()
}

type GetResponse_Contents struct {
	Contents []byte `protobuf:"bytes,1,opt,name=contents,proto3,oneof"`
}
type GetResponse_Hash struct {
	Hash *gnoi.HashType `protobuf:"bytes,2,opt,name=hash,oneof"`
}

func (*GetResponse_Contents) isGetResponse_Response() {}
func (*GetResponse_Hash) isGetResponse_Response()     {}

func (m *GetResponse) GetResponse() isGetResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *GetResponse) GetContents() []byte {
	if x, ok := m.GetResponse().(*GetResponse_Contents); ok {
		return x.Contents
	}
	return nil
}

func (m *GetResponse) GetHash() *gnoi.HashType {
	if x, ok := m.GetResponse().(*GetResponse_Hash); ok {
		return x.Hash
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetResponse_OneofMarshaler, _GetResponse_OneofUnmarshaler, _GetResponse_OneofSizer, []interface{}{
		(*GetResponse_Contents)(nil),
		(*GetResponse_Hash)(nil),
	}
}

func _GetResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetResponse)
	// response
	switch x := m.Response.(type) {
	case *GetResponse_Contents:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Contents)
	case *GetResponse_Hash:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hash); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _GetResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetResponse)
	switch tag {
	case 1: // response.contents
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Response = &GetResponse_Contents{x}
		return true, err
	case 2: // response.hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gnoi.HashType)
		err := b.DecodeMessage(msg)
		m.Response = &GetResponse_Hash{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetResponse)
	// response
	switch x := m.Response.(type) {
	case *GetResponse_Contents:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Contents)))
		n += len(x.Contents)
	case *GetResponse_Hash:
		s := proto.Size(x.Hash)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// StatRequest will list files at the provided path.
type StatRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *StatRequest) Reset()                    { *m = StatRequest{} }
func (m *StatRequest) String() string            { return proto.CompactTextString(m) }
func (*StatRequest) ProtoMessage()               {}
func (*StatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StatRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// StatResponse contains list of stat info of the provided path.
type StatResponse struct {
	Stats []*StatInfo `protobuf:"bytes,1,rep,name=stats" json:"stats,omitempty"`
}

func (m *StatResponse) Reset()                    { *m = StatResponse{} }
func (m *StatResponse) String() string            { return proto.CompactTextString(m) }
func (*StatResponse) ProtoMessage()               {}
func (*StatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StatResponse) GetStats() []*StatInfo {
	if m != nil {
		return m.Stats
	}
	return nil
}

// StatInfo provides a file system information about a particular path.
type StatInfo struct {
	Path         string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	LastModified uint64 `protobuf:"varint,2,opt,name=last_modified,json=lastModified" json:"last_modified,omitempty"`
	// Permissions are represented as the octal format of standard UNIX
	// file permissions.
	// ex. 775: user read/write/execute, group read/write/execute,
	// global read/execute.
	Permissions uint32 `protobuf:"varint,3,opt,name=permissions" json:"permissions,omitempty"`
	Size        uint64 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	// Default file creation mask. Represented as the octal format of
	// standard UNIX mask.
	Umask uint32 `protobuf:"varint,5,opt,name=umask" json:"umask,omitempty"`
}

func (m *StatInfo) Reset()                    { *m = StatInfo{} }
func (m *StatInfo) String() string            { return proto.CompactTextString(m) }
func (*StatInfo) ProtoMessage()               {}
func (*StatInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StatInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *StatInfo) GetLastModified() uint64 {
	if m != nil {
		return m.LastModified
	}
	return 0
}

func (m *StatInfo) GetPermissions() uint32 {
	if m != nil {
		return m.Permissions
	}
	return 0
}

func (m *StatInfo) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *StatInfo) GetUmask() uint32 {
	if m != nil {
		return m.Umask
	}
	return 0
}

// A RemoveRequest specifies a file to be removed from the target.
type RemoveRequest struct {
	RemoteFile string `protobuf:"bytes,1,opt,name=remote_file,json=remoteFile" json:"remote_file,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RemoveRequest) GetRemoteFile() string {
	if m != nil {
		return m.RemoteFile
	}
	return ""
}

type RemoveResponse struct {
}

func (m *RemoveResponse) Reset()                    { *m = RemoveResponse{} }
func (m *RemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveResponse) ProtoMessage()               {}
func (*RemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*PutRequest)(nil), "gnoi.file.PutRequest")
	proto.RegisterType((*PutRequest_Details)(nil), "gnoi.file.PutRequest.Details")
	proto.RegisterType((*PutResponse)(nil), "gnoi.file.PutResponse")
	proto.RegisterType((*GetRequest)(nil), "gnoi.file.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "gnoi.file.GetResponse")
	proto.RegisterType((*StatRequest)(nil), "gnoi.file.StatRequest")
	proto.RegisterType((*StatResponse)(nil), "gnoi.file.StatResponse")
	proto.RegisterType((*StatInfo)(nil), "gnoi.file.StatInfo")
	proto.RegisterType((*RemoveRequest)(nil), "gnoi.file.RemoveRequest")
	proto.RegisterType((*RemoveResponse)(nil), "gnoi.file.RemoveResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for File service

type FileClient interface {
	// Get read and streams the contents of a file from the target.
	// The file is streamed by sequential messages, each containing up to
	// 64KB of data. A final message is sent prior to closing the stream
	// that contains the hash of the data sent. An error is returned
	// if the file does not exist or there was an error reading the file.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (File_GetClient, error)
	// Put streams data into a file on the target. The file is sent in
	// sequential messages, each message containing up to 64KB of data. A final
	// message must be sent that includes the hash of the data sent. An
	// error is returned if the location does not exist or there is an error
	// writing the data. If no checksum is received, the target must assume the
	// operation is incomplete and remove the partially transmitted file. The
	// target should initially write the file to a temporary location so a failure
	// does not destroy the original file.
	Put(ctx context.Context, opts ...grpc.CallOption) (File_PutClient, error)
	// Stat returns metadata about a file on the target. An error is returned
	// if the file does not exist of there is an error in accessing the metadata.
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
	// Remove removes the specified file from the target. An error is
	// returned if the file does not exist, is a directory, or the remove
	// operation encounters an error (e.g., permission denied).
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
}

type fileClient struct {
	cc *grpc.ClientConn
}

func NewFileClient(cc *grpc.ClientConn) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (File_GetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_File_serviceDesc.Streams[0], c.cc, "/gnoi.file.File/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type File_GetClient interface {
	Recv() (*GetResponse, error)
	grpc.ClientStream
}

type fileGetClient struct {
	grpc.ClientStream
}

func (x *fileGetClient) Recv() (*GetResponse, error) {
	m := new(GetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileClient) Put(ctx context.Context, opts ...grpc.CallOption) (File_PutClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_File_serviceDesc.Streams[1], c.cc, "/gnoi.file.File/Put", opts...)
	if err != nil {
		return nil, err
	}
	x := &filePutClient{stream}
	return x, nil
}

type File_PutClient interface {
	Send(*PutRequest) error
	CloseAndRecv() (*PutResponse, error)
	grpc.ClientStream
}

type filePutClient struct {
	grpc.ClientStream
}

func (x *filePutClient) Send(m *PutRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filePutClient) CloseAndRecv() (*PutResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := grpc.Invoke(ctx, "/gnoi.file.File/Stat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := grpc.Invoke(ctx, "/gnoi.file.File/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for File service

type FileServer interface {
	// Get read and streams the contents of a file from the target.
	// The file is streamed by sequential messages, each containing up to
	// 64KB of data. A final message is sent prior to closing the stream
	// that contains the hash of the data sent. An error is returned
	// if the file does not exist or there was an error reading the file.
	Get(*GetRequest, File_GetServer) error
	// Put streams data into a file on the target. The file is sent in
	// sequential messages, each message containing up to 64KB of data. A final
	// message must be sent that includes the hash of the data sent. An
	// error is returned if the location does not exist or there is an error
	// writing the data. If no checksum is received, the target must assume the
	// operation is incomplete and remove the partially transmitted file. The
	// target should initially write the file to a temporary location so a failure
	// does not destroy the original file.
	Put(File_PutServer) error
	// Stat returns metadata about a file on the target. An error is returned
	// if the file does not exist of there is an error in accessing the metadata.
	Stat(context.Context, *StatRequest) (*StatResponse, error)
	// Remove removes the specified file from the target. An error is
	// returned if the file does not exist, is a directory, or the remove
	// operation encounters an error (e.g., permission denied).
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
}

func RegisterFileServer(s *grpc.Server, srv FileServer) {
	s.RegisterService(&_File_serviceDesc, srv)
}

func _File_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServer).Get(m, &fileGetServer{stream})
}

type File_GetServer interface {
	Send(*GetResponse) error
	grpc.ServerStream
}

type fileGetServer struct {
	grpc.ServerStream
}

func (x *fileGetServer) Send(m *GetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _File_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServer).Put(&filePutServer{stream})
}

type File_PutServer interface {
	SendAndClose(*PutResponse) error
	Recv() (*PutRequest, error)
	grpc.ServerStream
}

type filePutServer struct {
	grpc.ServerStream
}

func (x *filePutServer) SendAndClose(m *PutResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filePutServer) Recv() (*PutRequest, error) {
	m := new(PutRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _File_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.file.File/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.file.File/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _File_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.file.File",
	HandlerType: (*FileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stat",
			Handler:    _File_Stat_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _File_Remove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _File_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Put",
			Handler:       _File_Put_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "file/file.proto",
}

func init() { proto.RegisterFile("file/file.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0xad, 0xd7, 0x74, 0x6b, 0x6f, 0xda, 0x81, 0x0c, 0x8c, 0x50, 0x81, 0x28, 0x01, 0xa1, 0xf2,
	0x40, 0x3a, 0x75, 0x2f, 0xec, 0x09, 0x69, 0x42, 0xac, 0x48, 0x20, 0x4d, 0x81, 0x57, 0x34, 0x79,
	0xdd, 0x6d, 0x63, 0xd1, 0xd8, 0x21, 0x76, 0x90, 0xc6, 0x9f, 0xe0, 0x1f, 0xf2, 0x33, 0x78, 0x46,
	0xb6, 0x93, 0x36, 0xe9, 0xc6, 0xc7, 0x4b, 0x95, 0x9e, 0x9c, 0x73, 0xee, 0xb9, 0xc7, 0x0e, 0xdc,
	0x5a, 0xf0, 0x15, 0x4e, 0xcc, 0x4f, 0x94, 0xe5, 0x52, 0x4b, 0xda, 0x5b, 0x0a, 0xc9, 0x23, 0x03,
	0x0c, 0x9f, 0x2f, 0xb9, 0x4e, 0x8a, 0x8b, 0x68, 0x2e, 0xd3, 0x89, 0xcc, 0x50, 0xcc, 0xa5, 0x58,
	0xf0, 0xe5, 0xc4, 0x10, 0x26, 0xfa, 0x2a, 0x43, 0xe5, 0x24, 0xe1, 0x4f, 0x02, 0x70, 0x56, 0xe8,
	0x18, 0xbf, 0x16, 0xa8, 0x34, 0x3d, 0x02, 0xcf, 0xb0, 0x03, 0x32, 0x22, 0x63, 0x7f, 0xfa, 0x28,
	0x5a, 0x1b, 0x46, 0x1b, 0x52, 0xf4, 0x06, 0x35, 0xe3, 0x2b, 0x35, 0x6b, 0xc5, 0x96, 0x4c, 0x1f,
	0x42, 0x77, 0x2e, 0x85, 0x46, 0xa1, 0x55, 0xb0, 0x33, 0x22, 0xe3, 0xfe, 0xac, 0x15, 0xaf, 0x11,
	0xfa, 0x0c, 0xbc, 0x84, 0xa9, 0x24, 0x68, 0x5b, 0xcb, 0x7d, 0x67, 0x39, 0x63, 0x2a, 0xf9, 0x74,
	0x95, 0xa1, 0xf1, 0x30, 0x6f, 0x87, 0xef, 0x61, 0xaf, 0xb4, 0xa5, 0x8f, 0xc1, 0xcf, 0x31, 0x95,
	0x1a, 0xcf, 0xcd, 0x60, 0x1b, 0xa5, 0x17, 0x83, 0x83, 0xde, 0xf2, 0x15, 0xd2, 0x11, 0xf8, 0x19,
	0xe6, 0x29, 0x57, 0x8a, 0x4b, 0xe1, 0x46, 0x0e, 0xe2, 0x3a, 0x74, 0xd2, 0x83, 0xbd, 0xdc, 0x85,
	0x0d, 0x07, 0xe0, 0xdb, 0xe8, 0x2a, 0x93, 0x42, 0x61, 0xf8, 0x12, 0xe0, 0x14, 0xd7, 0xeb, 0xfe,
	0x6b, 0x54, 0xf8, 0x19, 0x7c, 0x4b, 0x77, 0xea, 0xc6, 0xa6, 0xe4, 0x8f, 0x9b, 0xee, 0xfc, 0x6d,
	0xd3, 0x13, 0x80, 0x6e, 0x5e, 0xa5, 0x79, 0x02, 0xfe, 0x47, 0xcd, 0xd6, 0x71, 0x28, 0x78, 0x19,
	0xd3, 0x49, 0x99, 0xc3, 0x3e, 0x87, 0xc7, 0xd0, 0x77, 0x94, 0x32, 0xc2, 0x0b, 0xe8, 0x28, 0xcd,
	0xec, 0xfc, 0xf6, 0xd8, 0x9f, 0xde, 0xa9, 0x1d, 0x91, 0xe1, 0xbd, 0x13, 0x0b, 0x19, 0x3b, 0x46,
	0xf8, 0x83, 0x40, 0xb7, 0xc2, 0x6e, 0xf2, 0xa6, 0x4f, 0x61, 0xb0, 0x62, 0x4a, 0x9f, 0xa7, 0xf2,
	0x92, 0x2f, 0x38, 0x5e, 0xda, 0xe4, 0x5e, 0xdc, 0x37, 0xe0, 0x87, 0x12, 0xdb, 0x6e, 0xbb, 0x7d,
	0xad, 0x6d, 0x63, 0xad, 0xf8, 0x77, 0x0c, 0x3c, 0xab, 0xb6, 0xcf, 0xf4, 0x2e, 0x74, 0x8a, 0x94,
	0xa9, 0x2f, 0x41, 0xc7, 0xf2, 0xdd, 0x9f, 0xf0, 0x10, 0x06, 0x31, 0xa6, 0xf2, 0x1b, 0xfe, 0xf7,
	0x01, 0xdc, 0x86, 0xfd, 0x4a, 0xe1, 0x0a, 0x98, 0xfe, 0x22, 0xe0, 0xd9, 0x6b, 0xf0, 0x0a, 0xda,
	0xa7, 0xa8, 0xe9, 0xbd, 0x5a, 0x03, 0x9b, 0xa3, 0x1d, 0x1e, 0x6c, 0xc3, 0x65, 0xe5, 0xad, 0x43,
	0x62, 0x94, 0x67, 0x45, 0x53, 0xb9, 0xb9, 0xde, 0x0d, 0x65, 0xfd, 0xea, 0xb4, 0xc6, 0x84, 0x1e,
	0x83, 0x67, 0x1a, 0xa5, 0x07, 0x5b, 0xb5, 0x57, 0xda, 0xfb, 0xd7, 0xf0, 0x4a, 0x4c, 0x5f, 0xc3,
	0xae, 0xdb, 0x84, 0x06, 0x35, 0x52, 0xa3, 0x8e, 0xe1, 0x83, 0x1b, 0xde, 0x54, 0x06, 0x17, 0xbb,
	0xf6, 0x8b, 0x3d, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xb5, 0xd9, 0xe5, 0xf7, 0x03, 0x00,
	0x00,
}
