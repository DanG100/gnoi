// Code generated by protoc-gen-go.
// source: common/common.proto
// DO NOT EDIT!

/*
Package gnoi is a generated protocol buffer package.

It is generated from these files:
	common/common.proto

It has these top-level messages:
	RemoteDownload
*/
package gnoi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import gnoi1 "types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RemoteDownload_Protocol int32

const (
	RemoteDownload_UNKNOWN RemoteDownload_Protocol = 0
	RemoteDownload_SFTP    RemoteDownload_Protocol = 1
	RemoteDownload_HTTP    RemoteDownload_Protocol = 2
	RemoteDownload_HTTPS   RemoteDownload_Protocol = 3
	RemoteDownload_SCP     RemoteDownload_Protocol = 4
)

var RemoteDownload_Protocol_name = map[int32]string{
	0: "UNKNOWN",
	1: "SFTP",
	2: "HTTP",
	3: "HTTPS",
	4: "SCP",
}
var RemoteDownload_Protocol_value = map[string]int32{
	"UNKNOWN": 0,
	"SFTP":    1,
	"HTTP":    2,
	"HTTPS":   3,
	"SCP":     4,
}

func (x RemoteDownload_Protocol) String() string {
	return proto.EnumName(RemoteDownload_Protocol_name, int32(x))
}
func (RemoteDownload_Protocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// RemoteDownload defines the details for a device to initiate a file transfer
// from or to a remote location.
type RemoteDownload struct {
	// The path information containing where to download the data from or to.
	// For HTTP(S), this will be the URL (i.e. foo.com/file.tbz2).
	// For SFTP and SCP, this will be the address:/path/to/file
	// (i.e. host.foo.com:/bar/baz).
	Path        string                  `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Protocol    RemoteDownload_Protocol `protobuf:"varint,2,opt,name=protocol,enum=gnoi.RemoteDownload_Protocol" json:"protocol,omitempty"`
	Credentials *gnoi1.Credentials      `protobuf:"bytes,3,opt,name=credentials" json:"credentials,omitempty"`
}

func (m *RemoteDownload) Reset()                    { *m = RemoteDownload{} }
func (m *RemoteDownload) String() string            { return proto.CompactTextString(m) }
func (*RemoteDownload) ProtoMessage()               {}
func (*RemoteDownload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RemoteDownload) GetCredentials() *gnoi1.Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func init() {
	proto.RegisterType((*RemoteDownload)(nil), "gnoi.RemoteDownload")
	proto.RegisterEnum("gnoi.RemoteDownload_Protocol", RemoteDownload_Protocol_name, RemoteDownload_Protocol_value)
}

func init() { proto.RegisterFile("common/common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0xce, 0xcf, 0xcd,
	0xcd, 0xcf, 0xd3, 0x87, 0x50, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x2c, 0xe9, 0x79, 0xf9,
	0x99, 0x52, 0x82, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0xfa, 0x60, 0x12, 0x22, 0xa1, 0x74, 0x95, 0x91,
	0x8b, 0x2f, 0x28, 0x35, 0x37, 0xbf, 0x24, 0xd5, 0x25, 0xbf, 0x3c, 0x2f, 0x27, 0x3f, 0x31, 0x45,
	0x48, 0x88, 0x8b, 0xa5, 0x20, 0xb1, 0x24, 0x43, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xcc,
	0x16, 0xb2, 0xe4, 0xe2, 0x00, 0xab, 0x4f, 0xce, 0xcf, 0x91, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x33,
	0x92, 0xd5, 0x03, 0x19, 0xa9, 0x87, 0xaa, 0x57, 0x2f, 0x00, 0xaa, 0x28, 0x08, 0xae, 0x5c, 0xc8,
	0x98, 0x8b, 0x3b, 0xb9, 0x28, 0x35, 0x25, 0x35, 0xaf, 0x24, 0x33, 0x31, 0xa7, 0x58, 0x82, 0x59,
	0x81, 0x51, 0x83, 0xdb, 0x48, 0x10, 0xa2, 0xdb, 0x19, 0x21, 0x11, 0x84, 0xac, 0x4a, 0xc9, 0x9e,
	0x8b, 0x03, 0x66, 0x94, 0x10, 0x37, 0x17, 0x7b, 0xa8, 0x9f, 0xb7, 0x9f, 0x7f, 0xb8, 0x9f, 0x00,
	0x83, 0x10, 0x07, 0x17, 0x4b, 0xb0, 0x5b, 0x48, 0x80, 0x00, 0x23, 0x88, 0xe5, 0x11, 0x12, 0x12,
	0x20, 0xc0, 0x24, 0xc4, 0xc9, 0xc5, 0x0a, 0x62, 0x05, 0x0b, 0x30, 0x0b, 0xb1, 0x73, 0x31, 0x07,
	0x3b, 0x07, 0x08, 0xb0, 0x24, 0xb1, 0x81, 0xed, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x79,
	0xb3, 0xda, 0x64, 0x0e, 0x01, 0x00, 0x00,
}
